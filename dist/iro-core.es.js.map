{"version":3,"file":"iro-core.es.js","sources":["../src/color.ts","../src/slider.ts","../src/wheel.ts","../src/svg.ts","../src/colorPickerOptions.ts"],"sourcesContent":["// Some regular expressions for rgb() and hsl() Colors are borrowed from tinyColor\n// https://github.com/bgrins/TinyColor\n\n// https://www.w3.org/TR/css3-values/#integers\nconst CSS_INTEGER = `[-\\\\+]?\\\\d+%?`;\n// http://www.w3.org/TR/css3-values/#number-value\nconst CSS_NUMBER = `[-\\\\+]?\\\\d*\\\\.\\\\d+%?`;\n// Allow positive/negative integer/number. Don't capture the either/or, just the entire outcome\nconst CSS_UNIT = `(?:${ CSS_NUMBER })|(?:${ CSS_INTEGER })`;\n\n// Parse function params\n// Parens and commas are optional, and this also allows for whitespace between numbers\nconst PERMISSIVE_MATCH_3 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\nconst PERMISSIVE_MATCH_4 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\n\n// Regex patterns for functional colors\nconst REGEX_FUNCTIONAL_RGB = new RegExp(`rgb${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_RGBA = new RegExp(`rgba${ PERMISSIVE_MATCH_4 }`);\nconst REGEX_FUNCTIONAL_HSL = new RegExp(`hsl${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_HSLA = new RegExp(`hsla${ PERMISSIVE_MATCH_4 }`);\n\nconst HEX_START = `^(?:#?|0x?)`;\nconst HEX_INT_SINGLE = `([0-9a-fA-F]{1})`;\nconst HEX_INT_DOUBLE = `([0-9a-fA-F]{2})`;\nconst REGEX_HEX_3 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_4 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_6 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\nconst REGEX_HEX_8 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\n\n/**\n * Parse a css unit string - either regular int or a percentage number\n */\nfunction parseUnit(str: string, max: number): number {\n  const isPercentage = str.indexOf('%') > -1;\n  const num = parseFloat(str);\n  return isPercentage ? (max / 100) * num : num;\n}\n\n/**\n * Parse hex str to an int\n */\nfunction parseHexInt(str: string): number {\n  return parseInt(str, 16);\n}\n\n/**\n * Convert into to 2-digit hex\n */\nfunction intToHex(int: number): string {\n  return int.toString(16).padStart(2, '0');\n}\n\ninterface ColorChanges {\n  h: boolean;\n  s: boolean;\n  v: boolean;\n  a?: boolean;\n}\n\ninterface HsvColor {\n  h: number;\n  s: number;\n  v: number;\n  a?: number;\n}\n\ninterface RgbColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\ninterface HslColor {\n  h: number;\n  s: number;\n  l: number;\n  a?: number;\n}\n\nexport type IroColorValue = IroColor | HsvColor | RgbColor | HslColor | string;\n\nexport class IroColor {\n  public onChange: Function;\n  public value: HsvColor;\n  /**\n    * @constructor Color object\n    * @param {Object | String | IroColor} value - Color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  constructor(value?: IroColorValue, onChange?: Function) {\n    // The default Color value\n    this.value = {h: 0, s: 0, v: 0, a: 1};\n    if (value) this.set(value);\n    // The watch callback function for this Color will be stored here\n    this.onChange = onChange;\n  }\n\n  /**\n    * @desc set the Color from any valid value\n    * @param {Object | String | IroColor} value - Color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  public set(value: IroColorValue) {\n    const isString = typeof value === 'string';\n    const isObject = typeof value === 'object';\n    if (typeof value === 'string' && (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value as string))) {\n      this.hexString = value as string;\n    }\n    else if (typeof value === 'string' && (/^rgba?/.test(value as string))) {\n      this.rgbString = value as string;\n    }\n    else if (typeof value === 'string' && (/^hsla?/.test(value as string))) {\n      this.hslString = value as string;\n    }\n    else if (typeof value === 'object' && (value instanceof IroColor)) {\n      this.hsv = value.hsv;\n    }\n    else if (typeof value === 'object' && ('r' in value) && ('g' in value) && ('b' in value)) {\n      this.rgb = value;\n    }\n    else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('v' in value)) {\n      this.hsv = value;\n    }\n    else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('l' in value)) {\n      this.hsl = value;\n    }\n    else {\n      throw new Error('invalid color value');\n    }\n  }\n\n  /**\n    * @desc shortcut to set a specific channel value\n    * @param {String} format - hsv | hsl | rgb\n    * @param {String} channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param {Number} value - new value for the channel\n  */\n  public setChannel(format: string, channel: string, value: number) {\n    this[format] = {...this[format], [channel]: value};\n  }\n\n  /**\n    * @desc make new Color instance with the same value as this one\n    * @return {IroColor}\n  */\n  public clone() {\n    return new IroColor(this);\n  }\n\n  /**\n    * @desc convert hsv object to rgb\n    * @param {Object} hsv hsv object\n    * @return {Object} rgb object\n  */\n  public static hsvToRgb(hsv: HsvColor): RgbColor {\n    const h = hsv.h / 60;\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const i = Math.floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    const mod = i % 6;\n    const r = [v, q, p, p, t, v][mod];\n    const g = [t, v, v, q, p, p][mod];\n    const b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255, \n      g: g * 255, \n      b: b * 255\n    };\n  }\n\n  /**\n    * @desc convert rgb object to hsv\n    * @param {Object} rgb - rgb object\n    * @return {Object} hsv object\n  */\n  public static rgbToHsv(rgb: RgbColor): HsvColor {\n    const r = rgb.r / 255;\n    const g = rgb.g / 255;\n    const b = rgb.b / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const delta = max - min;\n    let hue = 0;\n    let value = max;\n    let saturation = max === 0 ? 0 : delta / max;\n    switch (max) {\n      case min: \n        hue = 0; // achromatic\n        break;\n      case r: \n        hue = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g: \n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n    }\n    return {\n      h: hue * 60,\n      s: saturation * 100,\n      v: value * 100\n    }\n  }\n\n  /**\n    * @desc convert hsv object to hsl\n    * @param {Object} hsv - hsv object\n    * @return {Object} hsl object\n  */\n  public static hsvToHsl(hsv: HsvColor): HslColor {\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const l = (2 - s) * v;\n    const divisor = l <= 1 ? l : (2 - l);\n    // Avoid division by zero when lightness is close to zero\n    const saturation = divisor < 1e-9 ? 0 : (s * v) / divisor;\n    return {\n      h: hsv.h,\n      s: saturation * 100,\n      l: l * 50\n    };\n  }\n\n  /**\n    * @desc convert hsl object to hsv\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsv object\n  */\n  public static hslToHsv(hsl: HslColor): HsvColor {\n    const l = hsl.l * 2;\n    const s = (hsl.s * ((l <= 100) ? l : 200 - l)) / 100;\n    // Avoid division by zero when l + s is near 0\n    const saturation = (l + s < 1e-9) ? 0 : (2 * s) / (l + s);\n    return {\n      h: hsl.h,\n      s: saturation * 100,\n      v: (l + s) / 2\n    };\n  }\n\n  public get hsv() {\n    // _value is cloned to allow changes to be made to the values before passing them back\n    const value = this.value;\n    return {h: value.h, s: value.s, v: value.v};\n  }\n\n  public set hsv(newValue: any) {\n    const oldValue = this.value;\n\n    newValue = { ...oldValue, ...newValue };\n    // If this Color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this.onChange) {\n      // Compute changed values\n      let changes: ColorChanges = {\n        h: false,\n        v: false,\n        s: false,\n        a: false,\n      };\n\n      for (let key in oldValue) {\n        changes[key] = newValue[key] != oldValue[key]\n      };\n      // Update the old value\n      this.value = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v || changes.a) this.onChange(this, changes);\n    } else {\n      this.value = newValue;\n    }\n  }\n\n  public get rgb() {\n    const {r, g, b} = IroColor.hsvToRgb(this.value);\n    return {\n      r: Math.round(r),\n      g: Math.round(g),\n      b: Math.round(b),\n    };\n  }\n\n  public set rgb(value: any) {\n    this.hsv = {\n      ...IroColor.rgbToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get hsl() {\n    const {h, s, l} = IroColor.hsvToHsl(this.value);\n    return {\n      h: Math.round(h),\n      s: Math.round(s),\n      l: Math.round(l),\n    };\n  }\n\n  public set hsl(value: any) {\n    this.hsv = {\n      ...IroColor.hslToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get rgbString() {\n    const rgb = this.rgb;\n    return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n  }\n\n  public set rgbString(value: string) {\n    let match;\n    let r, g, b, a = 1;\n    if (match = REGEX_FUNCTIONAL_RGB.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n    }\n    else if (match = REGEX_FUNCTIONAL_RGBA.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a};\n    } \n    else {\n      throw new Error('invalid rgb string');\n    }\n  }\n\n  public get hexString() {\n    const rgb = this.rgb;\n    return `#${ intToHex(rgb.r) }${ intToHex(rgb.g) }${ intToHex(rgb.b) }`;\n  }\n\n  public set hexString(value: string) {\n    let match;\n    let r, g, b, a = 255;\n    if (match = REGEX_HEX_3.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n    }\n    else if (match = REGEX_HEX_4.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n      a = parseHexInt(match[4]) * 17;\n    }\n    else if (match = REGEX_HEX_6.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n    }\n    else if (match = REGEX_HEX_8.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n      a = parseHexInt(match[4]);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a: a / 255};\n    }\n    else {\n      throw new Error('invalid hex string');\n    }\n  }\n\n  public get hslString() {\n    const hsl = this.hsl;\n    return `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;\n  }\n\n  public set hslString(value: string) {\n    let match;\n    let h, s, l, a = 1;\n    if (match = REGEX_FUNCTIONAL_HSL.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n    }\n    else if (match = REGEX_FUNCTIONAL_HSLA.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.hsl = {h, s, l, a};\n    } \n    else {\n      throw new Error('invalid hsl string');\n    }\n  }\n}","import { IroColor } from './color';\n\nexport function getSliderDimensions(props: any) {\n  let { width, sliderHeight, borderWidth, handleRadius, padding } = props;\n  sliderHeight = sliderHeight ? sliderHeight : padding * 2 + handleRadius * 2 + borderWidth * 2;\n  return {\n    radius: sliderHeight / 2,\n    x: 0,\n    y: 0,\n    width: width,\n    height: sliderHeight,\n  }\n}\n\nexport function getCurrentSliderValue(props: any) {\n  const hsv = props.color.hsv;\n  switch (props.sliderType) {\n    case 'hue':\n      return hsv.h /= 3.6;\n    case 'saturation':\n      return hsv.s;\n    case 'value':\n    default:\n      return hsv.v;\n  }\n}\n\nexport function getSliderValueFromInput(props: any, x: number, y: number, bounds) {\n  const handleRange = bounds.width - bounds.height;\n  const cornerRadius = bounds.height / 2;\n  let dist = x - (bounds.left + cornerRadius);\n  dist = Math.max(Math.min(dist, handleRange), 0);\n  return Math.round((100 / handleRange) * dist);\n}\n\nexport function getSliderHandlePosition(props: any) {\n  const { width, height, radius } = getSliderDimensions(props);\n  const sliderValue = getCurrentSliderValue(props);\n  const handleRange = width - radius * 2;\n  const x = radius + (sliderValue / 100) * handleRange;\n  const y = height / 2;\n  return {x, y};\n}\n\nexport function getSliderGradient(props: any) {\n  const hsv = props.color.hsv;\n\n  switch (props.sliderType) {\n    case 'hue':\n      return [\n        {offset: '0',      color: '#f00'},\n        {offset: '16.666', color: '#ff0'},\n        {offset: '33.333', color: '#0f0'},\n        {offset: '50',     color: '#0ff'},\n        {offset: '66.666', color: '#00f'},\n        {offset: '83.333', color: '#f0f'},\n        {offset: '100',    color: '#f00'},\n      ];\n    case 'saturation':\n      const noSat = IroColor.hsvToHsl({h: hsv.h, s: 0, v: hsv.v});\n      const fullSat = IroColor.hsvToHsl({h: hsv.h, s: 100, v: hsv.v});\n      return [\n        {offset: '0', color: `hsl(${noSat.h}, ${noSat.s}%, ${noSat.l}%)`},\n        {offset: '100', color: `hsl(${fullSat.h}, ${fullSat.s}%, ${fullSat.l}%)`}\n      ];\n    case 'value':\n    default:\n      const hsl = IroColor.hsvToHsl({h: hsv.h, s: hsv.s, v: 100});\n      return [\n        {offset: '0', color: '#000'},\n        {offset: '100', color: `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`}\n      ];\n  }\n}","export function translateWheelAngle(props: any, angle: number) {\n  const wheelAngle = props.wheelAngle;\n    if (props.wheelDirection === 'clockwise') {\n      angle = -360 + angle - wheelAngle;\n    } else {\n      angle = wheelAngle - angle\n    }\n    // javascript's modulo operator doesn't produce positive numbers with negative input\n    // https://dev.to/maurobringolf/a-neat-trick-to-compute-modulo-of-negative-numbers-111e\n    return (angle % 360 + 360) % 360;\n}\n\nexport function getWheelCenter(props: any) {\n  const dist = (props.width / 2);\n  return {\n    x: dist,\n    y: dist\n  };\n}\n\nexport function getWheelHandlePosition(props: any) {\n  const hsv = props.color.hsv;\n  const { width, borderWidth, padding, handleRadius, wheelDirection } = props;\n  const radius = width / 2 - borderWidth;\n  const center = getWheelCenter(props);\n  const handleAngle = translateWheelAngle(props, hsv.h) * (Math.PI / 180);\n  const handleRange = radius - padding - handleRadius - borderWidth;\n  const handleDist = (hsv.s / 100) * handleRange;\n  const direction = wheelDirection === 'clockwise' ? -1 : 1;\n  return {\n    x: center.x + handleDist * Math.cos(handleAngle) * direction,\n    y: center.y + handleDist * Math.sin(handleAngle) * direction,\n  }\n}\n\nexport function getWheelValueFromInput(props: any, x: number, y: number, bounds) {\n  const { left, top } = bounds;\n  const radius = props.width / 2;\n  const handleRange = (radius - props.padding - props.handleRadius - props.borderWidth);\n  const cX = radius;\n  const cY = radius;\n  x = cX - (x - left);\n  y = cY - (y - top);\n  const handleAngle = Math.atan2(y, x);\n  // Calculate the hue by converting the angle to radians\n  const hue = translateWheelAngle(props, Math.round(handleAngle * (180 / Math.PI)) + 180);\n  // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n  const handleDist = Math.min(Math.sqrt(x * x + y * y), handleRange);\n  return {\n    h: hue,\n    s: Math.round((100 / handleRange) * handleDist)\n  };\n}","/**\n * Resolve an SVG URL\n * This is required to work around how Safari handles gradient URLS under certain conditions\n * If a page is using a client-side routing library which makes use of the HTML <base> tag, \n * Safari won't be able to render SVG gradients properly (as they are referenced by URLs)\n * More info on the problem: \n * https://stackoverflow.com/questions/19742805/angular-and-svg-filters/19753427#19753427\n * https://github.com/jaames/iro.js/issues/18\n * https://github.com/jaames/iro.js/issues/45\n */\nexport function resolveSvgUrl(url) {\n  // Sniff useragent string to check if the user is running Safari\n  const ua = window.navigator.userAgent;\n  const isSafari = /^((?!chrome|android).)*safari/i.test(ua);\n  const isIos = /iPhone|iPod|iPad/i.test(ua);\n  const location = window.location;\n  return (isSafari || isIos) ? `${location.protocol}//${location.host}${location.pathname}${location.search}${url}` : url;\n}\n\n/**\n * Get the path commands to draw an svg arc\n */\nexport function getSvgArcPath(cx: number, cy: number, radius: number, startAngle: number, endAngle: number) {\n  const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  startAngle *= Math.PI / 180;\n  endAngle *= Math.PI / 180;\n  const x1 = cx + radius * Math.cos(endAngle);\n  const y1 = cy + radius * Math.sin(endAngle);\n  const x2 = cx + radius * Math.cos(startAngle);\n  const y2 = cy + radius * Math.sin(startAngle);\n  return `M ${x1} ${y1} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${x2} ${y2}`;\n}","import { IroColorValue } from './color';\n\nexport interface IroHandleOrigin {\n  x: number;\n  y: number;\n}\n\nexport interface IroColorPickerOptions {\n  width?: number;\n  height?: number;\n  handleRadius?: number;\n  handleSvg?: string;\n  handleOrigin?: IroHandleOrigin;\n  color?: IroColorValue;\n  borderColor?: string;\n  borderWidth?: number;\n  wheelLightness?: boolean;\n  wheelAngle?: number;\n  wheelDirection?: string;\n  sliderHeight?: number;\n  sliderMargin?: number;\n  padding?: number;\n}\n\nexport const iroColorPickerOptionDefaults: IroColorPickerOptions = {\n  width: 300,\n  height: 300,\n  handleRadius: 8,\n  handleSvg: null,\n  handleOrigin: {x: 0, y: 0},\n  color: '#fff',\n  borderColor: '#fff',\n  borderWidth: 0,\n  wheelLightness: true,\n  wheelAngle: 0,\n  wheelDirection: 'anticlockwise',\n  sliderHeight: null,\n  sliderMargin: 12,\n  padding: 6,\n}"],"names":["const","CSS_UNIT","PERMISSIVE_MATCH_3","PERMISSIVE_MATCH_4","REGEX_FUNCTIONAL_RGB","RegExp","REGEX_FUNCTIONAL_RGBA","REGEX_FUNCTIONAL_HSL","REGEX_FUNCTIONAL_HSLA","REGEX_HEX_3","REGEX_HEX_4","REGEX_HEX_6","REGEX_HEX_8","parseUnit","str","max","isPercentage","indexOf","num","parseFloat","parseHexInt","parseInt","intToHex","int","toString","padStart","IroColor","constructor","value","onChange","this","set","getSliderDimensions","props","radius","sliderHeight","x","y","width","height","getCurrentSliderValue","hsv","color","sliderType","h","s","v","getSliderValueFromInput","bounds","handleRange","dist","left","Math","min","round","getSliderHandlePosition","getSliderGradient","offset","noSat","hsvToHsl","fullSat","hsl","translateWheelAngle","angle","wheelAngle","wheelDirection","getWheelCenter","getWheelHandlePosition","borderWidth","center","handleAngle","PI","handleDist","padding","handleRadius","direction","cos","sin","getWheelValueFromInput","atan2","hue","sqrt","resolveSvgUrl","url","ua","window","navigator","userAgent","isSafari","test","isIos","location","getSvgArcPath","cx","cy","startAngle","endAngle","largeArcFlag","hexString","rgbString","hslString","rgb","Error","setChannel","format","channel","Object","clone","hsvToRgb","i","floor","f","p","q","t","mod","r","g","b","rgbToHsv","delta","saturation","l","divisor","hslToHsv","prototypeAccessors","newValue","oldValue","changes","let","key","a","undefined","match","exec","iroColorPickerOptionDefaults","handleSvg","handleOrigin","borderColor","wheelLightness","sliderMargin"],"mappings":"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"}