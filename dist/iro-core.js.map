{"version":3,"file":"iro-core.js","sources":["../src/color.ts","../src/slider.ts","../src/wheel.ts","../src/svg.ts","../src/colorPickerOptions.ts"],"sourcesContent":["// Some regular expressions for rgb() and hsl() Colors are borrowed from tinyColor\n// https://github.com/bgrins/TinyColor\n// Kelvin temperature math borrowed from Neil Barlett's implementation\n// from https://github.com/neilbartlett/color-temperature\n\n// https://www.w3.org/TR/css3-values/#integers\nconst CSS_INTEGER = `[-\\\\+]?\\\\d+%?`;\n// http://www.w3.org/TR/css3-values/#number-value\nconst CSS_NUMBER = `[-\\\\+]?\\\\d*\\\\.\\\\d+%?`;\n// Allow positive/negative integer/number. Don't capture the either/or, just the entire outcome\nconst CSS_UNIT = `(?:${ CSS_NUMBER })|(?:${ CSS_INTEGER })`;\n\n// Parse function params\n// Parens and commas are optional, and this also allows for whitespace between numbers\nconst PERMISSIVE_MATCH_3 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\nconst PERMISSIVE_MATCH_4 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\n\n// Regex patterns for functional color strings\nconst REGEX_FUNCTIONAL_RGB = new RegExp(`rgb${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_RGBA = new RegExp(`rgba${ PERMISSIVE_MATCH_4 }`);\nconst REGEX_FUNCTIONAL_HSL = new RegExp(`hsl${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_HSLA = new RegExp(`hsla${ PERMISSIVE_MATCH_4 }`);\n\n// Color string parsing regex\nconst HEX_START = `^(?:#?|0x?)`;\nconst HEX_INT_SINGLE = `([0-9a-fA-F]{1})`;\nconst HEX_INT_DOUBLE = `([0-9a-fA-F]{2})`;\nconst REGEX_HEX_3 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_4 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_6 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\nconst REGEX_HEX_8 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\n\n// Kelvin temperature bounds\nconst KELVIN_MIN = 1000;\nconst KELVIN_MAX = 40000;\n\n// Math shorthands\nconst { log, round, floor } = Math;\n\n/**\n * @desc Parse a css unit string - either regular int or a percentage number\n * @param str - css unit string\n * @param max - max unit value, used for calculating percentages\n */\nfunction parseUnit(str: string, max: number): number {\n  const isPercentage = str.indexOf('%') > -1;\n  const num = parseFloat(str);\n  return isPercentage ? (max / 100) * num : num;\n}\n\n/**\n * @desc Parse hex str to an int\n * @param str - hex string to parse\n */\nfunction parseHexInt(str: string): number {\n  return parseInt(str, 16);\n}\n\n/**\n * @desc Convert nunber into to 2-digit hex\n * @param int - number to convert\n */\nfunction intToHex(int: number): string {\n  return int.toString(16).padStart(2, '0');\n}\n\ninterface ColorChanges {\n  h: boolean;\n  s: boolean;\n  v: boolean;\n  a: boolean;\n}\n\n// all hsv color channels are optional by design\ninterface HsvColor {\n  h?: number;\n  s?: number;\n  v?: number;\n  a?: number;\n}\n\ninterface RgbColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\ninterface HslColor {\n  h: number;\n  s: number;\n  l: number;\n  a?: number;\n}\n\nexport type IroColorValue = IroColor | HsvColor | RgbColor | HslColor | string;\n\nexport class IroColor {\n  // internal color value storage\n  private $: HsvColor;\n  private onChange: Function;\n  /**\n    * @constructor Color object\n    * @param value - initial color value\n  */\n  constructor(value?: IroColorValue, onChange?: Function) {\n    // The default Color value\n    this.$ = {h: 0, s: 0, v: 0, a: 1};\n    if (value) this.set(value);\n    // The watch callback function for this Color will be stored here\n    this.onChange = onChange;\n  }\n\n  /**\n    * @desc Set the Color from any valid value\n    * @param value - new color value\n  */\n  public set(value: IroColorValue) {\n    if (typeof value === 'string') {\n      if (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value as string)) {\n        this.hexString = value as string;\n      }\n      else if (/^rgba?/.test(value as string)) {\n        this.rgbString = value as string;\n      }\n      else if (/^hsla?/.test(value as string)) {\n        this.hslString = value as string;\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value instanceof IroColor) {\n        this.hsv = value.hsv;\n      }\n      else if (typeof value === 'object' && ('r' in value) && ('g' in value) && ('b' in value)) {\n        this.rgb = value;\n      }\n      else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('v' in value)) {\n        this.hsv = value;\n      }\n      else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('l' in value)) {\n        this.hsl = value;\n      }\n    }\n    else {\n      throw new Error('Invalid color value');\n    }\n  }\n\n  /**\n    * @desc Shortcut to set a specific channel value\n    * @param format - hsv | hsl | rgb\n    * @param channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param value - new value for the channel\n  */\n  public setChannel(format: string, channel: string, value: number) {\n    this[format] = {...this[format], [channel]: value};\n  }\n\n  /**\n    * @desc make new Color instance with the same value as this one\n  */\n  public clone() {\n    return new IroColor(this);\n  }\n\n  /**\n    * @desc Convert hsv object to rgb\n    * @param hsv - hsv color object\n  */\n  public static hsvToRgb(hsv: HsvColor): RgbColor {\n    const h = hsv.h / 60;\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const i = floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    const mod = i % 6;\n    const r = [v, q, p, p, t, v][mod];\n    const g = [t, v, v, q, p, p][mod];\n    const b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255, \n      g: g * 255, \n      b: b * 255\n    };\n  }\n\n  /**\n    * @desc Convert rgb object to hsv\n    * @param rgb - rgb object\n  */\n  public static rgbToHsv(rgb: RgbColor): HsvColor {\n    const r = rgb.r / 255;\n    const g = rgb.g / 255;\n    const b = rgb.b / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const delta = max - min;\n    let hue = 0;\n    let value = max;\n    let saturation = max === 0 ? 0 : delta / max;\n    switch (max) {\n      case min: \n        hue = 0; // achromatic\n        break;\n      case r: \n        hue = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g: \n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n    }\n    return {\n      h: hue * 60,\n      s: saturation * 100,\n      v: value * 100\n    }\n  }\n\n  /**\n    * @desc Convert hsv object to hsl\n    * @param hsv - hsv object\n  */\n  public static hsvToHsl(hsv: HsvColor): HslColor {\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const l = (2 - s) * v;\n    const divisor = l <= 1 ? l : (2 - l);\n    // Avoid division by zero when lightness is close to zero\n    const saturation = divisor < 1e-9 ? 0 : (s * v) / divisor;\n    return {\n      h: hsv.h,\n      s: saturation * 100,\n      l: l * 50\n    };\n  }\n\n  /**\n    * @desc Convert hsl object to hsv\n    * @param hsl - hsl object\n  */\n  public static hslToHsv(hsl: HslColor): HsvColor {\n    const l = hsl.l * 2;\n    const s = (hsl.s * ((l <= 100) ? l : 200 - l)) / 100;\n    // Avoid division by zero when l + s is near 0\n    const saturation = (l + s < 1e-9) ? 0 : (2 * s) / (l + s);\n    return {\n      h: hsl.h,\n      s: saturation * 100,\n      v: (l + s) / 2\n    };\n  }\n\n  /**\n    * @desc Convert a kelvin temperature to an approx, RGB value\n    * @param kelvin - kelvin temperature\n  */\n  public static kelvinToRgb(kelvin: number): RgbColor {\n    const temp = kelvin / 100;\n    let r, g, b;\n    if (temp < 66) {\n      r = 255\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g)\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b)\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r)\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g)\n      b = 255\n    }\n    return {r: floor(r), g: floor(g), b: floor(b)};\n  }\n\n   /**\n    * @desc Convert an RGB color to an approximate kelvin temperature\n    * @param kelvin - kelvin temperature\n  */\n  public static rgbToKelvin(rgb: RgbColor): number {\n    const { r, g, b } = rgb;\n    const eps = 0.4;\n    let minTemp = KELVIN_MIN;\n    let maxTemp = KELVIN_MAX;\n    let temp;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      const rgb = IroColor.kelvinToRgb(temp);\n      if ((rgb.b / rgb.r) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return temp;\n  }\n\n  public get hsv(): HsvColor {\n    // value is cloned to allow changes to be made to the values before passing them back\n    const value = this.$;\n    return {h: value.h, s: value.s, v: value.v};\n  }\n\n  public set hsv(newValue: HsvColor) {\n    const oldValue = this.$;\n\n    newValue = { ...oldValue, ...newValue };\n    // If this Color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this.onChange) {\n      // Compute changed values\n      let changes: ColorChanges = {\n        h: false,\n        v: false,\n        s: false,\n        a: false,\n      };\n\n      for (let key in oldValue) {\n        changes[key] = newValue[key] != oldValue[key]\n      };\n      // Update the old value\n      this.$ = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v || changes.a) this.onChange(this, changes);\n    } else {\n      this.$ = newValue;\n    }\n  }\n\n  public get hsva(): HsvColor {\n    return {...this.$};\n  }\n\n  public set hsva(value: HsvColor) {\n    this.hsv = value;\n  }\n\n  public get hue(): number {\n    return this.$.h;\n  }\n\n  public set hue(value: number) {\n    this.hsv = { h: value };\n  }\n\n  public get saturation(): number {\n    return this.$.s;\n  }\n\n  public set saturation(value: number) {\n    this.hsv = { s: value };\n  }\n\n  public get value(): number {\n    return this.$.v;\n  }\n\n  public set value(value: number) {\n    this.hsv = { s: value };\n  }\n\n  public get alpha(): number {\n    return this.$.a;\n  }\n\n  public set alpha(value: number) {\n    this.hsv = { ...this.hsv, a: value };\n  }\n\n  public get kelvin(): number {\n    return IroColor.rgbToKelvin(this.rgb);\n  }\n\n  public set kelvin(value: number) {\n    this.rgb = IroColor.kelvinToRgb(value);\n  }\n\n  public get rgb(): RgbColor {\n    const {r, g, b} = IroColor.hsvToRgb(this.$);\n    return {\n      r: round(r),\n      g: round(g),\n      b: round(b),\n    };\n  }\n\n  public set rgb(value: RgbColor) {\n    this.hsv = {\n      ...IroColor.rgbToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get rgba(): RgbColor {\n    return { ...this.rgb, a: this.alpha };\n  }\n\n  public set rgba(value: RgbColor) {\n    this.rgb = value;\n  }\n\n  public get hsl(): HslColor {\n    const {h, s, l} = IroColor.hsvToHsl(this.$);\n    return {\n      h: round(h),\n      s: round(s),\n      l: round(l),\n    };\n  }\n\n  public set hsl(value: HslColor) {\n    this.hsv = {\n      ...IroColor.hslToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get hsla(): HslColor {\n    return { ...this.hsl, a: this.alpha };\n  }\n\n  public set hsla(value: HslColor) {\n    this.hsl = value;\n  }\n\n  public get rgbString(): string {\n    const rgb = this.rgb;\n    return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n  }\n\n  public set rgbString(value: string) {\n    let match;\n    let r, g, b, a = 1;\n    if (match = REGEX_FUNCTIONAL_RGB.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n    }\n    else if (match = REGEX_FUNCTIONAL_RGBA.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a};\n    } \n    else {\n      throw new Error('Invalid rgb string');\n    }\n  }\n\n  public get rgbaString(): string {\n    const rgba = this.rgba;\n    return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n  }\n\n  public set rgbaString(value: string) {\n    this.rgbString = value;\n  }\n\n  public get hexString(): string {\n    const rgb = this.rgb;\n    return `#${ intToHex(rgb.r) }${ intToHex(rgb.g) }${ intToHex(rgb.b) }`;\n  }\n\n  public set hexString(value: string) {\n    let match;\n    let r, g, b, a = 255;\n    if (match = REGEX_HEX_3.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n    }\n    else if (match = REGEX_HEX_4.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n      a = parseHexInt(match[4]) * 17;\n    }\n    else if (match = REGEX_HEX_6.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n    }\n    else if (match = REGEX_HEX_8.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n      a = parseHexInt(match[4]);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a: a / 255};\n    }\n    else {\n      throw new Error('Invalid hex string');\n    }\n  }\n\n  public get hex8String(): string {\n    const rgba = this.rgba;\n    return `#${intToHex(rgba.r)}${intToHex(rgba.g)}${intToHex(rgba.b)}${intToHex(floor(rgba.a * 255))}`;\n  }\n\n  public set hex8String(value: string) {\n    this.hexString = value;\n  }\n\n  public get hslString(): string {\n    const hsl = this.hsl;\n    return `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;\n  }\n\n  public set hslString(value: string) {\n    let match;\n    let h, s, l, a = 1;\n    if (match = REGEX_FUNCTIONAL_HSL.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n    }\n    else if (match = REGEX_FUNCTIONAL_HSLA.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.hsl = {h, s, l, a};\n    } \n    else {\n      throw new Error('Invalid hsl string');\n    }\n  }\n\n  public get hslaString(): string {\n    const hsla = this.hsla;\n    return `hsl(${hsla.h}, ${hsla.s}%, ${hsla.l}%, ${hsla.a})`;\n  }\n\n  public set hslaString(value: string) {\n    this.hslString = value;\n  }\n}","import { IroColor } from './color';\nimport { IroColorPickerOptions } from './colorPickerOptions';\n\nexport type SliderShape = 'bar' | 'circle' | '';\nexport type SliderType = 'hue' | 'saturation' | 'value' | 'alpha' | 'temperature' | '';\n\nexport interface SliderOptions extends IroColorPickerOptions {\n  color: IroColor;\n  sliderShape: SliderShape;\n  sliderType: SliderType;\n  minTemperature: number;\n  maxTemperature: number;\n}\n\nexport const sliderDefaultOptions = {\n  sliderShape: 'bar',\n  sliderType: 'value',\n  minTemperature: 2200,\n  maxTemperature: 11000\n}\n\n/**\n * @desc Get the CSS styles for the slider root\n * @param props - slider props\n */\nexport function getSliderStyles(props: Partial<SliderOptions>) {\n  return {\n    [props.layoutDirection === 'vertical' ? 'marginLeft' : 'marginTop']: props.sliderMargin\n  }\n}\n\n/**\n * @desc Get the bounding dimensions of the slider\n * @param props - slider props\n */\nexport function getSliderDimensions(props: Partial<SliderOptions>) {\n  let { width, sliderHeight, borderWidth, handleRadius, padding, sliderShape } = props;\n  const isVertical = props.layoutDirection === 'vertical';\n  // automatically calculate sliderHeight if its not defined\n  sliderHeight = sliderHeight ? sliderHeight : padding * 2 + handleRadius * 2 + borderWidth * 2;\n  if (sliderShape === 'circle') {\n    return {\n      handleStart: props.padding + props.handleRadius,\n      handleRange: width - padding * 2 - handleRadius * 2 - borderWidth * 2,\n      width: width,\n      height: width,\n      cx: width / 2,\n      cy: width / 2,\n      radius: width / 2 - borderWidth / 2\n    }\n  } else {\n    return {\n      handleStart: sliderHeight / 2,\n      handleRange: width - sliderHeight,\n      radius: sliderHeight / 2,\n      x: 0,\n      y: 0,\n      width: isVertical ? sliderHeight : width,\n      height: isVertical ? width : sliderHeight,\n    }\n  }\n}\n\n/**\n * @desc Get the current slider value as a percentage\n * @param props - slider props\n */\nexport function getCurrentSliderValue(props: Partial<SliderOptions>) {\n  const hsva = props.color.hsva;\n  switch (props.sliderType) {\n    case 'alpha':\n      return hsva.a * 100;\n    case 'temperature':\n      const { minTemperature, maxTemperature } = props;\n      const temperatureRange = maxTemperature - minTemperature;\n      const percent = ((props.color.kelvin - minTemperature) / temperatureRange) * 100;\n      // clmap percentage\n      return Math.max(0, Math.min(percent, 100));\n    case 'hue':\n      return hsva.h /= 3.6;\n    case 'saturation':\n      return hsva.s;\n    case 'value':\n    default:\n      return hsva.v;\n  }\n}\n\n/**\n * @desc Get the current slider value from user input\n * @param props - slider props\n * @param x - global input x position\n * @param y - global input y position\n * @param bounds - slider element bounding box\n */\nexport function getSliderValueFromInput(props: Partial<SliderOptions>, x: number, y: number, bounds: any) {\n  const { handleRange, handleStart } = getSliderDimensions(props);\n  let handlePos;\n  if (props.layoutDirection === 'vertical') {\n    handlePos = -1 * (y - bounds.top) + handleRange + handleStart;\n  } else {\n    handlePos = x - (bounds.left + handleStart);\n  }\n  // clamp handle position\n  handlePos = Math.max(Math.min(handlePos, handleRange), 0);\n  const percent = Math.round((100 / handleRange) * handlePos);\n  switch (props.sliderType) {\n    case 'temperature':\n      const { minTemperature, maxTemperature } = props;\n      const temperatureRange = maxTemperature - minTemperature;\n      return minTemperature + temperatureRange * (percent / 100);\n    case 'alpha':\n      return percent / 100;\n    case 'hue':\n      return percent * 3.6;\n    default:\n      return percent;\n  }\n}\n\n/**\n * @desc Get the current slider position\n * @param props - slider props\n */\nexport function getSliderHandlePosition(props: Partial<SliderOptions>) {\n  const { width, height, handleRange, handleStart } = getSliderDimensions(props);\n  const isVertical = props.layoutDirection === 'vertical';\n  const sliderValue = getCurrentSliderValue(props);\n  const midPoint = isVertical ? width / 2 : height / 2;\n  let handlePos = handleStart + (sliderValue / 100) * handleRange;\n  if (isVertical) {\n    handlePos = -1 * handlePos + handleRange + handleStart * 2;\n  } \n  return {x: isVertical ? midPoint : handlePos, y: isVertical ? handlePos : midPoint};\n}\n\n/**\n * @desc Get the gradient stops for a slider\n * @param props - slider props\n */\nexport function getSliderGradient(props: Partial<SliderOptions>) {\n  const hsv = props.color.hsv;\n\n  switch (props.sliderType) {\n    case 'alpha':\n      const rgb = props.color.rgb;\n      return [\n        [0, `rgba(${ rgb.r }, ${ rgb.g }, ${ rgb.b }, 0)`],\n        [100, `rgba(${ rgb.r }, ${ rgb.g }, ${ rgb.b }, 1)`],\n      ]\n    case 'temperature':\n      const stops = [];\n      const min = props.minTemperature;\n      const max = props.maxTemperature;\n      const numStops = 8;\n      const range = max - min;\n      for (let kelvin = min, stop = 0; kelvin < max; kelvin += range / numStops, stop += 1) {\n        const { r, g, b } = IroColor.kelvinToRgb(kelvin);\n        stops.push([ 100 / numStops * stop, `rgb(${r},${g},${b})` ]);\n      }\n      return stops;\n    case 'hue':\n      return [\n        [0,      '#f00'],\n        [16.666, '#ff0'],\n        [33.333, '#0f0'],\n        [50,     '#0ff'],\n        [66.666, '#00f'],\n        [83.333, '#f0f'],\n        [100,    '#f00'],\n      ];\n    case 'saturation':\n      const noSat = IroColor.hsvToHsl({h: hsv.h, s: 0, v: hsv.v});\n      const fullSat = IroColor.hsvToHsl({h: hsv.h, s: 100, v: hsv.v});\n      return [\n        [0, `hsl(${noSat.h}, ${noSat.s}%, ${noSat.l}%)`],\n        [100, `hsl(${fullSat.h}, ${fullSat.s}%, ${fullSat.l}%)`]\n      ];\n    case 'value':\n    default:\n      const hsl = IroColor.hsvToHsl({h: hsv.h, s: hsv.s, v: 100});\n      return [\n        [0, '#000'],\n        [100, `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`]\n      ];\n  }\n}\n\n/**\n * @desc Get the gradient coords for a slider\n * @param props - slider props\n */\nexport function getSliderGradientCoords(props: Partial<SliderOptions>) {\n  const isVertical = props.layoutDirection === 'vertical';\n  return {\n    x1: '0%',\n    y1: isVertical ? '100%' : '0%',\n    x2: isVertical ? '0%' : '100%',\n    y2: '0%'\n  }\n}","import { IroColorPickerOptions } from './colorPickerOptions';\nimport { IroColor } from './color';\n\nexport interface WheelProps extends IroColorPickerOptions {\n  color: IroColor;\n}\n\n/**\n * @desc Translate an angle according to wheelAngle and wheelDirection\n * @param props - wheel props\n * @param angle - input angle\n */\nexport function translateWheelAngle(props: Partial<WheelProps>, angle: number) {\n  const wheelAngle = props.wheelAngle;\n  if (props.wheelDirection === 'clockwise') {\n    angle = -360 + angle - wheelAngle;\n  } else {\n    angle = wheelAngle - angle\n  }\n  // javascript's modulo operator doesn't produce positive numbers with negative input\n  // https://dev.to/maurobringolf/a-neat-trick-to-compute-modulo-of-negative-numbers-111e\n  return (angle % 360 + 360) % 360;\n}\n\n/**\n * @desc Get the point as the center of the wheel\n * @param props - wheel props\n */\nexport function getWheelCenter(props: Partial<WheelProps>) {\n  const dist = props.width / 2;\n  return {\n    x: dist,\n    y: dist\n  };\n}\n\n/**\n * @desc Get the current handle position\n * @param props - wheel props\n */\nexport function getWheelHandlePosition(props: Partial<WheelProps>) {\n  const hsv = props.color.hsv;\n  const center = getWheelCenter(props);\n  const handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  const handleAngle = translateWheelAngle(props, hsv.h) * (Math.PI / 180);\n  const handleDist = (hsv.s / 100) * handleRange;\n  const direction = props.wheelDirection === 'clockwise' ? -1 : 1;\n  return {\n    x: center.x + handleDist * Math.cos(handleAngle) * direction,\n    y: center.y + handleDist * Math.sin(handleAngle) * direction,\n  }\n}\n\n/**\n * @desc Get the current wheel value from user input\n * @param props - wheel props\n * @param x - global input x position\n * @param y - global input y position\n * @param bounds - wheel element bounding box\n */\nexport function getWheelValueFromInput(props: Partial<WheelProps>, x: number, y: number, bounds: any) {\n  const center = getWheelCenter(props);\n  const handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  x = center.x - (x - bounds.left);\n  y = center.y - (y - bounds.top);\n  // Calculate the hue by converting the angle to radians\n  const hue = translateWheelAngle(props, Math.atan2(-y, -x) * (180 / Math.PI));\n  // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n  const handleDist = Math.min(Math.sqrt(x * x + y * y), handleRange);\n  return {\n    h: Math.round(hue),\n    s: Math.round((100 / handleRange) * handleDist)\n  };\n}","// Keep track of html <base> elements for resolveSvgUrl\n// getElementsByTagName returns a live HTMLCollection, which stays in sync with the DOM tree\n// So it only needs to be called once\nconst BASE_ELEMENTS = document.getElementsByTagName('base');\n\n/**\n * @desc Resolve an SVG reference URL\n * This is required to work around how Safari and iOS webviews handle gradient URLS under certain conditions\n * If a page is using a client-side routing library which makes use of the HTML <base> tag, \n * Safari won't be able to render SVG gradients properly (as they are referenced by URLs)\n * More info on the problem: \n * https://stackoverflow.com/questions/19742805/angular-and-svg-filters/19753427#19753427\n * https://github.com/jaames/iro.js/issues/18\n * https://github.com/jaames/iro.js/issues/45\n * https://github.com/jaames/iro.js/pull/89\n * @props url - SVG reference URL\n */\nexport function resolveSvgUrl(url: string) {\n  // Sniff useragent string to check if the user is running Safari\n  const ua = window.navigator.userAgent;\n  const isSafari = /^((?!chrome|android).)*safari/i.test(ua);\n  const isIos = /iPhone|iPod|iPad/i.test(ua);\n  const location = window.location;\n  return ((isSafari || isIos) && (BASE_ELEMENTS.length > 0)) ? `${location.protocol}//${location.host}${location.pathname}${location.search}${url}` : url;\n}\n\n/**\n * @desc Get the path commands to draw an svg arc\n * @props cx - arc center point x\n * @props cy - arc center point y\n * @props radius - arc radius\n * @props startAngle - arc start angle\n * @props endAngle - arc end angle\n */\nexport function getSvgArcPath(cx: number, cy: number, radius: number, startAngle: number, endAngle: number) {\n  const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  startAngle *= Math.PI / 180;\n  endAngle *= Math.PI / 180;\n  const x1 = cx + radius * Math.cos(endAngle);\n  const y1 = cy + radius * Math.sin(endAngle);\n  const x2 = cx + radius * Math.cos(startAngle);\n  const y2 = cy + radius * Math.sin(startAngle);\n  return `M ${x1} ${y1} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${x2} ${y2}`;\n}","import { IroColor, IroColorValue } from './color';\n\nexport type LayoutDirection = 'vertical' | 'horizontal' | '';\n\nexport type WheelDirection = 'clockwise' | 'anticlockwise' | '';\n\nexport interface IroHandleOrigin {\n  x: number;\n  y: number;\n}\n\nexport interface IroColorPickerOptions {\n  width?: number;\n  height?: number;\n  handleRadius?: number;\n  handleSvg?: string;\n  handleOrigin?: IroHandleOrigin;\n  color?: IroColorValue;\n  borderColor?: string;\n  borderWidth?: number;\n  wheelLightness?: boolean;\n  wheelAngle?: number;\n  wheelDirection?: WheelDirection;\n  layoutDirection?: LayoutDirection;\n  sliderHeight?: number;\n  sliderMargin?: number;\n  padding?: number;\n}\n\nexport const iroColorPickerOptionDefaults: IroColorPickerOptions = {\n  width: 300,\n  height: 300,\n  handleRadius: 8,\n  handleSvg: null,\n  handleOrigin: {x: 0, y: 0},\n  color: '#fff',\n  borderColor: '#fff',\n  borderWidth: 0,\n  wheelLightness: true,\n  wheelAngle: 0,\n  wheelDirection: 'anticlockwise',\n  sliderHeight: null,\n  sliderMargin: 12,\n  padding: 6,\n}"],"names":["const","CSS_UNIT","PERMISSIVE_MATCH_3","PERMISSIVE_MATCH_4","REGEX_FUNCTIONAL_RGB","RegExp","REGEX_FUNCTIONAL_RGBA","REGEX_FUNCTIONAL_HSL","REGEX_FUNCTIONAL_HSLA","REGEX_HEX_3","REGEX_HEX_4","REGEX_HEX_6","REGEX_HEX_8","parseUnit","str","max","isPercentage","indexOf","num","parseFloat","parseHexInt","parseInt","intToHex","int","toString","padStart","IroColor","constructor","value","onChange","$","this","set","getSliderDimensions","props","isVertical","layoutDirection","sliderHeight","padding","handleRadius","borderWidth","handleStart","handleRange","width","height","cx","cy","radius","x","y","getCurrentSliderValue","hsva","color","sliderType","a","Math","min","kelvin","minTemperature","h","s","v","translateWheelAngle","angle","wheelAngle","wheelDirection","getWheelCenter","dist","test","hexString","rgbString","hslString","Error","hsv","rgb","hsl","setChannel","format","channel","Object","clone","hsvToRgb","i","floor","f","p","q","t","mod","r","g","b","rgbToHsv","delta","hue","saturation","hsvToHsl","l","divisor","hslToHsv","kelvinToRgb","temp","log","rgbToKelvin","minTemp","maxTemp","prototypeAccessors","newValue","oldValue","changes","let","key","alpha","round","undefined","rgba","hsla","match","exec","rgbaString","hex8String","hslaString","BASE_ELEMENTS","document","getElementsByTagName","sliderShape","maxTemperature","sliderMargin","bounds","handlePos","top","left","percent","midPoint","stops","range","stop","push","noSat","fullSat","x1","y1","x2","y2","center","handleAngle","PI","handleDist","direction","cos","sin","atan2","sqrt","url","ua","window","navigator","userAgent","isSafari","isIos","location","length","startAngle","endAngle","largeArcFlag","handleSvg","handleOrigin","borderColor","wheelLightness"],"mappings":"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"}