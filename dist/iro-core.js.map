{"version":3,"file":"iro-core.js","sources":["../src/color.ts","../src/slider.ts","../src/wheel.ts","../src/box.ts","../src/util.ts","../src/css.ts","../src/colorPickerOptions.ts"],"sourcesContent":["// Some regular expressions for rgb() and hsl() Colors are borrowed from tinyColor\n// https://github.com/bgrins/TinyColor\n// Kelvin temperature math borrowed from Neil Barlett's implementation\n// from https://github.com/neilbartlett/color-temperature\n\n// https://www.w3.org/TR/css3-values/#integers\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// http://www.w3.org/TR/css3-values/#number-value\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number. Don't capture the either/or, just the entire outcome\nconst CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';\n\n// Parse function params\n// Parens and commas are optional, and this also allows for whitespace between numbers\nconst PERMISSIVE_MATCH_3 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\nconst PERMISSIVE_MATCH_4 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\n\n// Regex patterns for functional color strings\nconst REGEX_FUNCTIONAL_RGB = new RegExp('rgb' + PERMISSIVE_MATCH_3);\nconst REGEX_FUNCTIONAL_RGBA = new RegExp('rgba' + PERMISSIVE_MATCH_4);\nconst REGEX_FUNCTIONAL_HSL = new RegExp('hsl' + PERMISSIVE_MATCH_3);\nconst REGEX_FUNCTIONAL_HSLA = new RegExp('hsla' + PERMISSIVE_MATCH_4);\n\n// Color string parsing regex\nconst HEX_START = '^(?:#?|0x?)';\nconst HEX_INT_SINGLE = '([0-9a-fA-F]{1})';\nconst HEX_INT_DOUBLE = '([0-9a-fA-F]{2})';\nconst REGEX_HEX_3 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + '$');\nconst REGEX_HEX_4 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + '$');\nconst REGEX_HEX_6 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + '$');\nconst REGEX_HEX_8 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + '$');\n\n// Kelvin temperature bounds\nconst KELVIN_MIN = 2000;\nconst KELVIN_MAX = 40000;\n\n// Math shorthands\nconst { log, round, floor } = Math;\n\n/**\n * @desc Clamp a number between a min and max value\n * @param num - input value\n * @param min - min allowed value\n * @param max - max allowed value\n */\nfunction clamp(num: number, min: number, max: number): number {\n  return Math.min(Math.max(num, min), max)\n}\n\n/**\n * @desc Parse a css unit string - either regular int or a percentage number\n * @param str - css unit string\n * @param max - max unit value, used for calculating percentages\n */\nfunction parseUnit(str: string, max: number): number {\n  const isPercentage = str.indexOf('%') > -1;\n  const num = parseFloat(str);\n  return isPercentage ? (max / 100) * num : num;\n}\n\n/**\n * @desc Parse hex str to an int\n * @param str - hex string to parse\n */\nfunction parseHexInt(str: string): number {\n  return parseInt(str, 16);\n}\n\n/**\n * @desc Convert nunber into to 2-digit hex\n * @param int - number to convert\n */\nfunction intToHex(int: number): string {\n  return int.toString(16).padStart(2, '0');\n}\n\nexport interface ColorChanges {\n  h: boolean;\n  s: boolean;\n  v: boolean;\n  a: boolean;\n}\n\n// all hsv color channels are optional by design\nexport interface HsvColor {\n  h?: number;\n  s?: number;\n  v?: number;\n  a?: number;\n}\n\nexport interface RgbColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\nexport interface HslColor {\n  h: number;\n  s: number;\n  l: number;\n  a?: number;\n}\n\nexport type IroColorValue = IroColor | HsvColor | RgbColor | HslColor | string;\n\nexport class IroColor {\n  // internal color value storage\n  private $: HsvColor;\n  private onChange: Function;\n  private initialValue: HsvColor;\n\n  public index: number;\n\n  /**\n    * @constructor Color object\n    * @param value - initial color value\n  */\n  constructor(value?: IroColorValue, onChange?: Function) {\n    // The default Color value\n    this.$ = {h: 0, s: 0, v: 0, a: 1};\n    if (value) this.set(value);\n    // The watch callback function for this Color will be stored here\n    this.onChange = onChange;\n    this.initialValue = { ...this.$ }; // copy initial value\n  }\n\n  /**\n    * @desc Set the Color from any valid value\n    * @param value - new color value\n  */\n  public set(value: IroColorValue) {\n    if (typeof value === 'string') {\n      if (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value as string)) {\n        this.hexString = value as string;\n      }\n      else if (/^rgba?/.test(value as string)) {\n        this.rgbString = value as string;\n      }\n      else if (/^hsla?/.test(value as string)) {\n        this.hslString = value as string;\n      }\n    }\n    else if (typeof value === 'object') {\n      if (value instanceof IroColor) {\n        this.hsv = value.hsv;\n      }\n      else if (typeof value === 'object' && ('r' in value) && ('g' in value) && ('b' in value)) {\n        this.rgb = value;\n      }\n      else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('v' in value)) {\n        this.hsv = value;\n      }\n      else if (typeof value === 'object' && ('h' in value) && ('s' in value) && ('l' in value)) {\n        this.hsl = value;\n      }\n    }\n    else {\n      throw new Error('Invalid color value');\n    }\n  }\n\n  /**\n    * @desc Shortcut to set a specific channel value\n    * @param format - hsv | hsl | rgb\n    * @param channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param value - new value for the channel\n  */\n  public setChannel(format: string, channel: string, value: number) {\n    this[format] = {...this[format], [channel]: value};\n  }\n\n  /**\n   * @desc Reset color back to its initial value\n   */\n  public reset() {\n    this.hsva = this.initialValue;\n  }\n\n  /**\n    * @desc make new Color instance with the same value as this one\n  */\n  public clone() {\n    return new IroColor(this);\n  }\n\n  /**\n   * @desc remove color onChange\n   */\n  public unbind() {\n    this.onChange = undefined;\n  }\n\n  /**\n    * @desc Convert hsv object to rgb\n    * @param hsv - hsv color object\n  */\n  public static hsvToRgb(hsv: HsvColor): RgbColor {\n    const h = hsv.h / 60;\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const i = floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    const mod = i % 6;\n    const r = [v, q, p, p, t, v][mod];\n    const g = [t, v, v, q, p, p][mod];\n    const b = [p, p, t, v, v, q][mod];\n    return {\n      r: clamp(r * 255, 0, 255), \n      g: clamp(g * 255, 0, 255), \n      b: clamp(b * 255, 0, 255)\n    };\n  }\n\n  /**\n    * @desc Convert rgb object to hsv\n    * @param rgb - rgb object\n  */\n  public static rgbToHsv(rgb: RgbColor): HsvColor {\n    const r = rgb.r / 255;\n    const g = rgb.g / 255;\n    const b = rgb.b / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const delta = max - min;\n    let hue = 0;\n    let value = max;\n    let saturation = max === 0 ? 0 : delta / max;\n    switch (max) {\n      case min: \n        hue = 0; // achromatic\n        break;\n      case r: \n        hue = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g: \n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n    }\n    return {\n      h: (hue * 60) % 360,\n      s: clamp(saturation * 100, 0, 100),\n      v: clamp(value * 100, 0, 100)\n    }\n  }\n\n  /**\n    * @desc Convert hsv object to hsl\n    * @param hsv - hsv object\n  */\n  public static hsvToHsl(hsv: HsvColor): HslColor {\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const l = (2 - s) * v;\n    const divisor = l <= 1 ? l : (2 - l);\n    // Avoid division by zero when lightness is close to zero\n    const saturation = divisor < 1e-9 ? 0 : (s * v) / divisor;\n    return {\n      h: hsv.h,\n      s: clamp(saturation * 100, 0, 100),\n      l: clamp(l * 50, 0, 100)\n    };\n  }\n\n  /**\n    * @desc Convert hsl object to hsv\n    * @param hsl - hsl object\n  */\n  public static hslToHsv(hsl: HslColor): HsvColor {\n    const l = hsl.l * 2;\n    const s = (hsl.s * ((l <= 100) ? l : 200 - l)) / 100;\n    // Avoid division by zero when l + s is near 0\n    const saturation = (l + s < 1e-9) ? 0 : (2 * s) / (l + s);\n    return {\n      h: hsl.h,\n      s: clamp(saturation * 100, 0, 100),\n      v: clamp((l + s) / 2, 0, 100)\n    };\n  }\n\n  /**\n    * @desc Convert a kelvin temperature to an approx, RGB value\n    * @param kelvin - kelvin temperature\n  */\n  public static kelvinToRgb(kelvin: number): RgbColor {\n    const temp = kelvin / 100;\n    let r, g, b;\n    if (temp < 66) {\n      r = 255\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g)\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b)\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r)\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g)\n      b = 255\n    }\n    return {\n      r: clamp(floor(r), 0, 255),\n      g: clamp(floor(g), 0, 255),\n      b: clamp(floor(b), 0, 255)\n    };\n  }\n\n   /**\n    * @desc Convert an RGB color to an approximate kelvin temperature\n    * @param kelvin - kelvin temperature\n  */\n  public static rgbToKelvin(rgb: RgbColor): number {\n    const { r, g, b } = rgb;\n    const eps = 0.4;\n    let minTemp = KELVIN_MIN;\n    let maxTemp = KELVIN_MAX;\n    let temp;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      const rgb = IroColor.kelvinToRgb(temp);\n      if ((rgb.b / rgb.r) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return temp;\n  }\n\n  public get hsv(): HsvColor {\n    // value is cloned to allow changes to be made to the values before passing them back\n    const value = this.$;\n    return {h: value.h, s: value.s, v: value.v};\n  }\n\n  public set hsv(newValue: HsvColor) {\n    const oldValue = this.$;\n\n    newValue = { ...oldValue, ...newValue };\n    // If this Color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this.onChange) {\n      // Compute changed values\n      let changes: ColorChanges = {\n        h: false,\n        v: false,\n        s: false,\n        a: false,\n      };\n\n      for (let key in oldValue) {\n        changes[key] = newValue[key] != oldValue[key]\n      };\n      // Update the old value\n      this.$ = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v || changes.a) this.onChange(this, changes);\n    } else {\n      this.$ = newValue;\n    }\n  }\n\n  public get hsva(): HsvColor {\n    return {...this.$};\n  }\n\n  public set hsva(value: HsvColor) {\n    this.hsv = value;\n  }\n\n  public get hue(): number {\n    return this.$.h;\n  }\n\n  public set hue(value: number) {\n    this.hsv = { h: value };\n  }\n\n  public get saturation(): number {\n    return this.$.s;\n  }\n\n  public set saturation(value: number) {\n    this.hsv = { s: value };\n  }\n\n  public get value(): number {\n    return this.$.v;\n  }\n\n  public set value(value: number) {\n    this.hsv = { v: value };\n  }\n\n  public get alpha(): number {\n    return this.$.a;\n  }\n\n  public set alpha(value: number) {\n    this.hsv = { ...this.hsv, a: value };\n  }\n\n  public get kelvin(): number {\n    return IroColor.rgbToKelvin(this.rgb);\n  }\n\n  public set kelvin(value: number) {\n    this.rgb = IroColor.kelvinToRgb(value);\n  }\n\n  public get red(): number {\n    const rgb = this.rgb;\n    return rgb.r;\n  }\n\n  public set red(value: number) {\n    this.rgb = { ...this.rgb, r: value };\n  }\n\n  public get green(): number {\n    const rgb = this.rgb;\n    return rgb.g;\n  }\n\n  public set green(value: number) {\n    this.rgb = { ...this.rgb, g: value };\n  }\n\n  public get blue(): number {\n    const rgb = this.rgb;\n    return rgb.b;\n  }\n\n  public set blue(value: number) {\n    this.rgb = { ...this.rgb, b: value };\n  }\n\n  public get rgb(): RgbColor {\n    const {r, g, b} = IroColor.hsvToRgb(this.$);\n    return {\n      r: round(r),\n      g: round(g),\n      b: round(b),\n    };\n  }\n\n  public set rgb(value: RgbColor) {\n    this.hsv = {\n      ...IroColor.rgbToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get rgba(): RgbColor {\n    return { ...this.rgb, a: this.alpha };\n  }\n\n  public set rgba(value: RgbColor) {\n    this.rgb = value;\n  }\n\n  public get hsl(): HslColor {\n    const {h, s, l} = IroColor.hsvToHsl(this.$);\n    return {\n      h: round(h),\n      s: round(s),\n      l: round(l),\n    };\n  }\n\n  public set hsl(value: HslColor) {\n    this.hsv = {\n      ...IroColor.hslToHsv(value), \n      a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get hsla(): HslColor {\n    return { ...this.hsl, a: this.alpha };\n  }\n\n  public set hsla(value: HslColor) {\n    this.hsl = value;\n  }\n\n  public get rgbString(): string {\n    const rgb = this.rgb;\n    return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n  }\n\n  public set rgbString(value: string) {\n    let match;\n    let r, g, b, a = 1;\n    if (match = REGEX_FUNCTIONAL_RGB.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n    }\n    else if (match = REGEX_FUNCTIONAL_RGBA.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a};\n    } \n    else {\n      throw new Error('Invalid rgb string');\n    }\n  }\n\n  public get rgbaString(): string {\n    const rgba = this.rgba;\n    return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n  }\n\n  public set rgbaString(value: string) {\n    this.rgbString = value;\n  }\n\n  public get hexString(): string {\n    const rgb = this.rgb;\n    return `#${ intToHex(rgb.r) }${ intToHex(rgb.g) }${ intToHex(rgb.b) }`;\n  }\n\n  public set hexString(value: string) {\n    let match;\n    let r, g, b, a = 255;\n    if (match = REGEX_HEX_3.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n    }\n    else if (match = REGEX_HEX_4.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n      a = parseHexInt(match[4]) * 17;\n    }\n    else if (match = REGEX_HEX_6.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n    }\n    else if (match = REGEX_HEX_8.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n      a = parseHexInt(match[4]);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a: a / 255};\n    }\n    else {\n      throw new Error('Invalid hex string');\n    }\n  }\n\n  public get hex8String(): string {\n    const rgba = this.rgba;\n    return `#${intToHex(rgba.r)}${intToHex(rgba.g)}${intToHex(rgba.b)}${intToHex(floor(rgba.a * 255))}`;\n  }\n\n  public set hex8String(value: string) {\n    this.hexString = value;\n  }\n\n  public get hslString(): string {\n    const hsl = this.hsl;\n    return `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;\n  }\n\n  public set hslString(value: string) {\n    let match;\n    let h, s, l, a = 1;\n    if (match = REGEX_FUNCTIONAL_HSL.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n    }\n    else if (match = REGEX_FUNCTIONAL_HSLA.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.hsl = {h, s, l, a};\n    } \n    else {\n      throw new Error('Invalid hsl string');\n    }\n  }\n\n  public get hslaString(): string {\n    const hsla = this.hsla;\n    return `hsl(${hsla.h}, ${hsla.s}%, ${hsla.l}%, ${hsla.a})`;\n  }\n\n  public set hslaString(value: string) {\n    this.hslString = value;\n  }\n}","import { IroColor } from './color';\nimport { CssGradientStops } from './css';\nimport { IroColorPickerOptions } from './colorPickerOptions';\n\nexport type SliderShape = 'bar' | 'circle' | '';\nexport type SliderType = 'red' | 'green' | 'blue' |'alpha' | 'hue' | 'saturation' | 'value' | 'kelvin' | '';\n\nexport interface SliderOptions extends IroColorPickerOptions {\n  color: IroColor;\n  sliderShape: SliderShape;\n  sliderType: SliderType;\n  minTemperature: number;\n  maxTemperature: number;\n}\n\nexport const sliderDefaultOptions = {\n  sliderShape: 'bar',\n  sliderType: 'value',\n  minTemperature: 2200,\n  maxTemperature: 11000\n}\n\n/**\n * @desc Get the CSS styles for the slider root\n * @param props - slider props\n */\nexport function getSliderStyles(props: Partial<SliderOptions>) {\n  return {\n    [props.layoutDirection === 'horizontal' ? 'marginLeft' : 'marginTop']: props.sliderMargin\n  }\n}\n\n/**\n * @desc Get the bounding dimensions of the slider\n * @param props - slider props\n */\nexport function getSliderDimensions(props: Partial<SliderOptions>) {\n  let { width, sliderSize: sliderSize, borderWidth, handleRadius, padding, sliderShape } = props;\n  const ishorizontal = props.layoutDirection === 'horizontal';\n  // automatically calculate sliderSize if its not defined\n  sliderSize = sliderSize ?? padding * 2 + handleRadius * 2;\n  if (sliderShape === 'circle') {\n    return {\n      handleStart: props.padding + props.handleRadius,\n      handleRange: width - padding * 2 - handleRadius * 2,\n      width: width,\n      height: width,\n      cx: width / 2,\n      cy: width / 2,\n      radius: width / 2 - borderWidth / 2\n    }\n  } else {\n    return {\n      handleStart: sliderSize / 2,\n      handleRange: width - sliderSize,\n      radius: sliderSize / 2,\n      x: 0,\n      y: 0,\n      width: ishorizontal ? sliderSize : width,\n      height: ishorizontal ? width : sliderSize,\n    }\n  }\n}\n\n/**\n * @desc Get the current slider value for a given color, as a percentage\n * @param props - slider props\n * @param color\n */\nexport function getCurrentSliderValue(props: Partial<SliderOptions>, color: IroColor) {\n  const hsva = color.hsva;\n  const rgb = color.rgb;\n\n  switch (props.sliderType) {\n    case 'red':\n      return rgb.r / 2.55;\n    case 'green':\n      return rgb.g / 2.55;\n    case 'blue':\n      return rgb.b / 2.55;\n    case 'alpha':\n      return hsva.a * 100;\n    case 'kelvin':\n      const { minTemperature, maxTemperature } = props;\n      const temperatureRange = maxTemperature - minTemperature;\n      const percent = ((color.kelvin - minTemperature) / temperatureRange) * 100;\n      // clmap percentage\n      return Math.max(0, Math.min(percent, 100));\n    case 'hue':\n      return hsva.h /= 3.6;\n    case 'saturation':\n      return hsva.s;\n    case 'value':\n    default:\n      return hsva.v;\n  }\n}\n\n/**\n * @desc Get the current slider value from user input\n * @param props - slider props\n * @param x - global input x position\n * @param y - global input y position\n */\nexport function getSliderValueFromInput(props: Partial<SliderOptions>, x: number, y: number) {\n  const { handleRange, handleStart } = getSliderDimensions(props);\n  let handlePos;\n  if (props.layoutDirection === 'horizontal') {\n    handlePos = -1 * y + handleRange + handleStart;\n  } else {\n    handlePos = x - handleStart;\n  }\n  // clamp handle position\n  handlePos = Math.max(Math.min(handlePos, handleRange), 0);\n  const percent = Math.round((100 / handleRange) * handlePos);\n  switch (props.sliderType) {\n    case 'kelvin':\n      const { minTemperature, maxTemperature } = props;\n      const temperatureRange = maxTemperature - minTemperature;\n      return minTemperature + temperatureRange * (percent / 100);\n    case 'alpha':\n      return percent / 100;\n    case 'hue':\n      return percent * 3.6;\n    case 'red':\n    case 'blue':\n    case 'green':\n      return percent * 2.55;\n    default:\n      return percent;\n  }\n}\n\n/**\n * @desc Get the current handle position for a given color\n * @param props - slider props\n * @param color\n */\nexport function getSliderHandlePosition(props: Partial<SliderOptions>, color: IroColor) {\n  const { width, height, handleRange, handleStart } = getSliderDimensions(props);\n  const ishorizontal = props.layoutDirection === 'horizontal';\n  const sliderValue = getCurrentSliderValue(props, color);\n  const midPoint = ishorizontal ? width / 2 : height / 2;\n  let handlePos = handleStart + (sliderValue / 100) * handleRange;\n  if (ishorizontal) {\n    handlePos = -1 * handlePos + handleRange + handleStart * 2;\n  } \n  return {\n    x: ishorizontal ? midPoint : handlePos, \n    y: ishorizontal ? handlePos : midPoint\n  };\n}\n\n/**\n * @desc Get the gradient stops for a slider\n * @param props - slider props\n * @param color\n */\nexport function getSliderGradient(props: Partial<SliderOptions>, color: IroColor): CssGradientStops {\n  const hsv = color.hsv;\n  const rgb = color.rgb;\n\n  switch (props.sliderType) {\n    case 'red':\n      return [\n        [0, `rgb(${ 0 },${ rgb.g },${ rgb.b })`],\n        [100, `rgb(${ 255 },${ rgb.g },${ rgb.b })`],\n      ];\n    case 'green':\n      return [\n        [0, `rgb(${ rgb.r },${ 0 },${ rgb.b })`],\n        [100, `rgb(${ rgb.r },${ 255 },${ rgb.b })`],\n      ];\n    case 'blue':\n      return [\n        [0, `rgb(${ rgb.r },${ rgb.g },${ 0 })`],\n        [100, `rgb(${ rgb.r },${ rgb.g },${ 255 })`],\n      ];\n    case 'alpha':\n      return [\n        [0, `rgba(${ rgb.r },${ rgb.g },${ rgb.b },0)`],\n        [100, `rgb(${ rgb.r },${ rgb.g },${ rgb.b })`],\n      ];\n    case 'kelvin':\n      const stops = [];\n      const min = props.minTemperature;\n      const max = props.maxTemperature;\n      const numStops = 8;\n      const range = max - min;\n      for (let kelvin = min, stop = 0; kelvin < max; kelvin += range / numStops, stop += 1) {\n        const { r, g, b } = IroColor.kelvinToRgb(kelvin);\n        stops.push([ 100 / numStops * stop, `rgb(${r},${g},${b})` ]);\n      }\n      return stops;\n    case 'hue':\n      return [\n        [0,      '#f00'],\n        [16.666, '#ff0'],\n        [33.333, '#0f0'],\n        [50,     '#0ff'],\n        [66.666, '#00f'],\n        [83.333, '#f0f'],\n        [100,    '#f00'],\n      ];\n    case 'saturation':\n      const noSat = IroColor.hsvToHsl({h: hsv.h, s: 0, v: hsv.v});\n      const fullSat = IroColor.hsvToHsl({h: hsv.h, s: 100, v: hsv.v});\n      return [\n        [0, `hsl(${noSat.h},${noSat.s}%,${noSat.l}%)`],\n        [100, `hsl(${fullSat.h},${fullSat.s}%,${fullSat.l}%)`]\n      ];\n    case 'value':\n    default:\n      const hsl = IroColor.hsvToHsl({h: hsv.h, s: hsv.s, v: 100});\n      return [\n        [0, '#000'],\n        [100, `hsl(${hsl.h},${hsl.s}%,${hsl.l}%)`]\n      ];\n  }\n}\n\n/**\n * @desc Get the gradient coords for a slider\n * @param props - slider props\n */\nexport function getSliderGradientCoords(props: Partial<SliderOptions>) {\n  const ishorizontal = props.layoutDirection === 'horizontal';\n  return {\n    x1: '0%',\n    y1: ishorizontal ? '100%' : '0%',\n    x2: ishorizontal ? '0%' : '100%',\n    y2: '0%'\n  }\n}","import { IroColorPickerOptions } from './colorPickerOptions';\nimport { IroColor, IroColorValue } from './color';\n\nexport interface WheelProps extends IroColorPickerOptions {\n  color: IroColor;\n}\n\n/**\n * @desc Get the point as the center of the wheel\n * @param props - wheel props\n */\nexport function getWheelDimensions(props: Partial<WheelProps>) {\n  const rad = props.width / 2;\n  return {\n    width: props.width,\n    radius: rad - props.borderWidth,\n    cx: rad,\n    cy: rad\n  };\n}\n\n/**\n * @desc Translate an angle according to wheelAngle and wheelDirection\n * @param props - wheel props\n * @param angle - input angle\n */\nexport function translateWheelAngle(props: Partial<WheelProps>, angle: number, invert?: boolean) {\n  const wheelAngle = props.wheelAngle;\n  const wheelDirection = props.wheelDirection\n  // inverted and clockwisee\n  if (invert && wheelDirection === 'clockwise')\n    angle = wheelAngle + angle;\n  // clockwise (input handling)\n  else if (wheelDirection === 'clockwise')\n    angle = (360 - wheelAngle) + angle;\n  // inverted and anticlockwise\n  else if (invert && wheelDirection === 'anticlockwise')\n    angle = (wheelAngle + 180) - angle;\n  // anticlockwise (input handling)\n  else if (wheelDirection === 'anticlockwise')\n    angle = wheelAngle - angle;\n  // javascript's modulo operator doesn't produce positive numbers with negative input\n  // https://dev.to/maurobringolf/a-neat-trick-to-compute-modulo-of-negative-numbers-111e\n  return (angle % 360 + 360) % 360;\n}\n\n/**\n * @desc Get the current handle position for a given color\n * @param props - wheel props\n * @param color\n */\nexport function getWheelHandlePosition(props: Partial<WheelProps>, color: IroColor) {\n  const hsv = color.hsv;\n  const { cx, cy } = getWheelDimensions(props);\n  const handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  const handleAngle = (180 + translateWheelAngle(props, hsv.h, true)) * (Math.PI / 180);\n  const handleDist = (hsv.s / 100) * handleRange;\n  const direction = props.wheelDirection === 'clockwise' ? -1 : 1;\n  return {\n    x: cx + handleDist * Math.cos(handleAngle) * direction,\n    y: cy + handleDist * Math.sin(handleAngle) * direction,\n  }\n}\n\n/**\n * @desc Get the current wheel value from user input\n * @param props - wheel props\n * @param x - global input x position\n * @param y - global input y position\n */\nexport function getWheelValueFromInput(props: Partial<WheelProps>, x: number, y: number) {\n  const { cx, cy } = getWheelDimensions(props);\n  const handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  x = cx - x;\n  y = cy - y;\n  // Calculate the hue by converting the angle to radians\n  const hue = translateWheelAngle(props, Math.atan2(-y, -x) * (180 / Math.PI));\n  // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n  const handleDist = Math.min(Math.sqrt(x * x + y * y), handleRange);\n  return {\n    h: Math.round(hue),\n    s: Math.round((100 / handleRange) * handleDist)\n  };\n}","import { IroColor } from './color';\nimport { CssGradientStops } from './css';\nimport { IroColorPickerOptions } from './colorPickerOptions';\n\nexport interface BoxOptions extends IroColorPickerOptions {\n  color: IroColor;\n}\n\n/**\n * @desc Get the CSS styles for the box root element\n * @param props - box props\n */\nexport function getBoxStyles(props: Partial<BoxOptions>) {\n  return {\n    [props.layoutDirection === 'horizontal' ? 'marginLeft' : 'marginTop']: props.sliderMargin\n  }\n}\n\n/**\n * @desc Get the bounding dimensions of the box\n * @param props - box props\n */\nexport function getBoxDimensions(props: Partial<BoxOptions>) {\n  const { width, boxHeight, padding, handleRadius } = props;\n  return {\n    width: width,\n    height: boxHeight ?? width,\n    radius: padding + handleRadius\n  };\n}\n\n/**\n * @desc Get the current box value from user input\n * @param props - box props\n * @param x - global input x position\n * @param y - global input y position\n */\nexport function getBoxValueFromInput(props: Partial<BoxOptions>, x: number, y: number) {\n  const { width, height, radius } = getBoxDimensions(props);\n  const handleStart = radius;\n  const handleRangeX = width - radius * 2;\n  const handleRangeY = height - radius * 2;\n  const percentX = ((x - handleStart) / handleRangeX) * 100;\n  const percentY = ((y - handleStart) / handleRangeY) * 100;\n  return {\n    s: Math.max(0, Math.min(percentX, 100)),\n    v: Math.max(0, Math.min(100 - percentY, 100))\n  }\n}\n\n/**\n * @desc Get the current box handle position for a given color\n * @param props - box props\n * @param color\n */\nexport function getBoxHandlePosition(props: Partial<BoxOptions>, color: IroColor) {\n  const { width, height, radius } = getBoxDimensions(props);\n  const hsv = color.hsv;\n  const handleStart = radius;\n  const handleRangeX = width - radius * 2;\n  const handleRangeY = height - radius * 2;\n  return { \n    x: handleStart + (hsv.s / 100) * handleRangeX,\n    y: handleStart + (handleRangeY - ((hsv.v / 100) * handleRangeY))\n  }\n}\n\n/**\n * @desc Get the gradient stops for a box\n * @param props - box props\n * @param color\n */\nexport function getBoxGradients(props: Partial<BoxOptions>, color: IroColor): CssGradientStops[] {\n  const hue = color.hue;\n  return [\n    // saturation gradient\n    [\n      [0, '#fff'],\n      [100, `hsl(${hue},100%,50%)`],\n    ],\n    // lightness gradient\n    [\n      [0, 'rgba(0,0,0,0)'],\n      [100, '#000'],\n    ]\n  ];\n}","import { IroColorPickerOptions } from './colorPickerOptions';\n\n// Keep track of html <base> elements for resolveSvgUrl\n// getElementsByTagName returns a live HTMLCollection, which stays in sync with the DOM tree\n// So it only needs to be called once\nlet BASE_ELEMENTS:  HTMLCollectionOf<HTMLBaseElement> | undefined;\n\n/**\n * @desc Resolve an SVG reference URL\n * This is required to work around how Safari and iOS webviews handle gradient URLS under certain conditions\n * If a page is using a client-side routing library which makes use of the HTML <base> tag, \n * Safari won't be able to render SVG gradients properly (as they are referenced by URLs)\n * More info on the problem: \n * https://stackoverflow.com/questions/19742805/angular-and-svg-filters/19753427#19753427\n * https://github.com/jaames/iro.js/issues/18\n * https://github.com/jaames/iro.js/issues/45\n * https://github.com/jaames/iro.js/pull/89\n * @props url - SVG reference URL\n */\nexport function resolveSvgUrl(url: string) {\n  if (!BASE_ELEMENTS)\n    BASE_ELEMENTS = document.getElementsByTagName('base');\n  // Sniff useragent string to check if the user is running Safari\n  const ua = window.navigator.userAgent;\n  const isSafari = /^((?!chrome|android).)*safari/i.test(ua);\n  const isIos = /iPhone|iPod|iPad/i.test(ua);\n  const location = window.location;\n  return ((isSafari || isIos) && (BASE_ELEMENTS.length > 0)) ? `${location.protocol}//${location.host}${location.pathname}${location.search}${url}` : url;\n}\n\n/**\n * @desc Get the path commands to draw an svg arc\n * @props cx - arc center point x\n * @props cy - arc center point y\n * @props radius - arc radius\n * @props startAngle - arc start angle\n * @props endAngle - arc end angle\n */\nexport function getSvgArcPath(cx: number, cy: number, radius: number, startAngle: number, endAngle: number) {\n  const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  startAngle *= Math.PI / 180;\n  endAngle *= Math.PI / 180;\n  const x1 = cx + radius * Math.cos(endAngle);\n  const y1 = cy + radius * Math.sin(endAngle);\n  const x2 = cx + radius * Math.cos(startAngle);\n  const y2 = cy + radius * Math.sin(startAngle);\n  return `M ${x1} ${y1} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${x2} ${y2}`;\n}\n\n/**\n * @desc Given a specifc (x, y) position, test if there's a handle there and return its index, else return null.\n *       This is used for components like the box and wheel which support multiple handles when multicolor is active\n * @props x - point x position\n * @props y - point y position\n * @props handlePositions - array of {x, y} coords for each handle\n */\nexport function getHandleAtPoint(props: Partial<IroColorPickerOptions>, x: number, y: number, handlePositions: {x: number, y: number}[]) {\n  for (let i = 0; i < handlePositions.length; i++) {\n    const dX = handlePositions[i].x - x;\n    const dY = handlePositions[i].y - y;\n    const dist = Math.sqrt(dX * dX + dY * dY);\n    if (dist < props.handleRadius) {\n      return i;\n    }\n  }\n  return null;\n}","import { IroColorPickerOptions } from './colorPickerOptions';\n\nexport function cssBorderStyles(props: IroColorPickerOptions) {\n  return {\n    boxSizing: 'border-box',\n    border: `${ props.borderWidth }px solid ${ props.borderColor }`\n  };\n}\n\nexport type CssGradientType = 'linear' | 'radial' | 'conical';\nexport type CssGradientStops = [number, number | string][];\n\nexport function cssGradient(type: CssGradientType, direction: string, stops: CssGradientStops) {\n  return `${ type }-gradient(${ direction }, ${ stops.map(([o, col]) => `${ col } ${ o }%`).join(',') })`;\n}\n\nexport function cssValue(value: number | string) {\n  if (typeof(value) === 'string')\n    return value;\n  return `${ value }px`;\n}","import { IroColor, IroColorValue } from './color';\n\nexport type LayoutDirection = 'vertical' | 'horizontal' | '';\n\nexport type WheelDirection = 'clockwise' | 'anticlockwise' | '';\n\nexport interface IroColorPickerOptions {\n  width?: number;\n  height?: number;\n  color?: IroColorValue;\n  colors?: IroColorValue[];\n  padding?: number;\n  layoutDirection?: LayoutDirection;\n  borderColor?: string;\n  borderWidth?: number;\n  handleRadius?: number;\n  handleSvg?: string;\n  handleProps?: any;\n  wheelLightness?: boolean;\n  wheelAngle?: number;\n  wheelDirection?: WheelDirection;\n  sliderSize?: number;\n  sliderMargin?: number;\n  boxHeight?: number;\n}\n\nexport const iroColorPickerOptionDefaults: IroColorPickerOptions = {\n  width: 300,\n  height: 300,\n  color: '#fff',\n  colors: [],\n  padding: 6,\n  layoutDirection: 'vertical',\n  borderColor: '#fff',\n  borderWidth: 0,\n  handleRadius: 8,\n  handleSvg: null,\n  handleProps: {x: 0, y: 0},\n  wheelLightness: true,\n  wheelAngle: 0,\n  wheelDirection: 'anticlockwise',\n  sliderSize: null,\n  sliderMargin: 12,\n  boxHeight: null\n}"],"names":["CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH_3","PERMISSIVE_MATCH_4","REGEX_FUNCTIONAL_RGB","RegExp","REGEX_FUNCTIONAL_RGBA","REGEX_FUNCTIONAL_HSL","REGEX_FUNCTIONAL_HSLA","HEX_START","HEX_INT_SINGLE","HEX_INT_DOUBLE","REGEX_HEX_3","REGEX_HEX_4","REGEX_HEX_6","REGEX_HEX_8","KELVIN_MIN","KELVIN_MAX","log","Math","round","floor","clamp","num","min","max","parseUnit","str","isPercentage","indexOf","parseFloat","parseHexInt","parseInt","intToHex","int","toString","padStart","IroColor","value","onChange","$","h","s","v","a","set","initialValue","test","hexString","rgbString","hslString","hsv","rgb","hsl","Error","setChannel","format","channel","reset","hsva","clone","unbind","undefined","hsvToRgb","i","f","p","q","t","mod","r","g","b","rgbToHsv","delta","hue","saturation","hsvToHsl","l","divisor","hslToHsv","kelvinToRgb","kelvin","temp","rgbToKelvin","eps","minTemp","maxTemp","newValue","oldValue","changes","key","alpha","match","exec","rgba","hsla","sliderDefaultOptions","sliderShape","sliderType","minTemperature","maxTemperature","getSliderStyles","props","layoutDirection","sliderMargin","getSliderDimensions","width","sliderSize","borderWidth","handleRadius","padding","ishorizontal","handleStart","handleRange","height","cx","cy","radius","x","y","getCurrentSliderValue","color","temperatureRange","percent","getSliderValueFromInput","handlePos","getSliderHandlePosition","sliderValue","midPoint","getSliderGradient","stops","numStops","range","stop","push","noSat","fullSat","getSliderGradientCoords","x1","y1","x2","y2","getWheelDimensions","rad","translateWheelAngle","angle","invert","wheelAngle","wheelDirection","getWheelHandlePosition","handleAngle","PI","handleDist","direction","cos","sin","getWheelValueFromInput","atan2","sqrt","getBoxStyles","getBoxDimensions","boxHeight","getBoxValueFromInput","handleRangeX","handleRangeY","percentX","percentY","getBoxHandlePosition","getBoxGradients","BASE_ELEMENTS","resolveSvgUrl","url","document","getElementsByTagName","ua","window","navigator","userAgent","isSafari","isIos","location","length","protocol","host","pathname","search","getSvgArcPath","startAngle","endAngle","largeArcFlag","getHandleAtPoint","handlePositions","dX","dY","dist","cssBorderStyles","boxSizing","border","borderColor","cssGradient","type","map","o","col","join","cssValue","iroColorPickerOptionDefaults","colors","handleSvg","handleProps","wheelLightness"],"mappings":"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"}