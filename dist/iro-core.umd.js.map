{"version":3,"file":"iro-core.umd.js","sources":["../src/colorUtils.ts","../src/color.ts","../src/slider.ts","../src/wheel.ts","../src/svg.ts"],"sourcesContent":["/**\n * Parse a css unit string - either regular int or a percentage number\n */\nexport function parseUnit(str: string, max: number): number {\n  const isPercentage = str.indexOf('%') > -1;\n  const num = parseFloat(str);\n  return isPercentage ? (max / 100) * num : num;\n}\n\n/**\n * Parse hex str to an int\n */\nexport function parseHexInt(str: string): number {\n  return parseInt(str, 16);\n}\n\n/**\n * Convert into to 2-digit hex\n */\nexport function intToHex(int: number): string {\n  return int.toString(16).padStart(2, '0');\n}","import { parseUnit, parseHexInt, intToHex } from './colorUtils';\n\n// Some regular expressions for rgb() and hsl() Colors are borrowed from tinyColor\n// https://github.com/bgrins/TinyColor\n\n// https://www.w3.org/TR/css3-values/#integers\nconst CSS_INTEGER = `[-\\\\+]?\\\\d+%?`;\n// http://www.w3.org/TR/css3-values/#number-value\nconst CSS_NUMBER = `[-\\\\+]?\\\\d*\\\\.\\\\d+%?`;\n// Allow positive/negative integer/number. Don't capture the either/or, just the entire outcome\nconst CSS_UNIT = `(?:${ CSS_NUMBER })|(?:${ CSS_INTEGER })`;\n\n// Parse function params\n// Parens and commas are optional, and this also allows for whitespace between numbers\nconst PERMISSIVE_MATCH_3 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\nconst PERMISSIVE_MATCH_4 = `[\\\\s|\\\\(]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })[,|\\\\s]+(${ CSS_UNIT })\\\\s*\\\\)?`;\n\n// Regex patterns for functional colors\nconst REGEX_FUNCTIONAL_RGB = new RegExp(`rgb${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_RGBA = new RegExp(`rgba${ PERMISSIVE_MATCH_4 }`);\nconst REGEX_FUNCTIONAL_HSL = new RegExp(`hsl${ PERMISSIVE_MATCH_3 }`);\nconst REGEX_FUNCTIONAL_HSLA = new RegExp(`hsla${ PERMISSIVE_MATCH_4 }`);\n\nconst HEX_START = `^(?:#?|0x?)`;\nconst HEX_INT_SINGLE = `([0-9a-fA-F]{1})`;\nconst HEX_INT_DOUBLE = `([0-9a-fA-F]{2})`;\nconst REGEX_HEX_3 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_4 = new RegExp(`${ HEX_START }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }${ HEX_INT_SINGLE }$`);\nconst REGEX_HEX_6 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\nconst REGEX_HEX_8 = new RegExp(`${ HEX_START }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }${ HEX_INT_DOUBLE }$`);\n\ninterface ColorChanges {\n  h: boolean;\n  s: boolean;\n  v: boolean;\n  a?: boolean;\n}\n\ninterface HsvColor {\n  h: number;\n  s: number;\n  v: number;\n  a?: number;\n}\n\ninterface RgbColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\ninterface HslColor {\n  h: number;\n  s: number;\n  l: number;\n  a?: number;\n}\n\nfunction instanceOfHsv(value: any): value is HsvColor {\n  return ('h' in value) && ('s' in value) && ('v' in value);\n}\n\nfunction instanceOfRgb(value: any): value is RgbColor {\n  return ('r' in value) && ('g' in value) && ('b' in value);\n}\n\nfunction instanceOfHsl(value: any): value is HslColor {\n  return ('h' in value) && ('s' in value) && ('l' in value);\n}\n\nexport type IroColorValue = IroColor | HsvColor | RgbColor | HslColor | string;\n\nexport class IroColor {\n  public onChange: Function;\n  private value: HsvColor;\n  /**\n    * @constructor Color object\n    * @param {Object | String | IroColor} value - Color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  constructor(value: IroColorValue, onChange?: Function) {\n    // The watch callback function for this Color will be stored here\n    this.onChange = onChange;\n    // The default Color value\n    this.value = {h: 0, s: 0, v: 0, a: 1};\n    if (value) this.set(value);\n  }\n\n  /**\n    * @desc set the Color from any valid value\n    * @param {Object | String | IroColor} value - Color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  public set(value: IroColorValue) {\n    const isString = typeof value === 'string';\n    const isObject = typeof value === 'object';\n    if ((isString) && (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value as string))) {\n      this.hexString = value as string;\n    }\n    else if ((isString) && (/^rgba?/.test(value as string))) {\n      this.rgbString = value as string;\n    }\n    else if ((isString) && (/^hsla?/.test(value as string))) {\n      this.hslString = value as string;\n    }\n    else if ((isObject) && (value instanceof IroColor)) {\n      this.hsv = value.hsv;\n    }\n    else if ((isObject) && instanceOfRgb(value)) {\n      this.rgb = value;\n    }\n    else if ((isObject) && instanceOfHsv(value)) {\n      this.hsv = value;\n    }\n    else if ((isObject) && instanceOfHsl(value)) {\n      this.hsl = value;\n    }\n    else {\n      throw new Error('invalid color value');\n    }\n  }\n\n  /**\n    * @desc shortcut to set a specific channel value\n    * @param {String} format - hsv | hsl | rgb\n    * @param {String} channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param {Number} value - new value for the channel\n  */\n  public setChannel(format: string, channel: string, value: number) {\n    this[format] = {...this[format], [channel]: value};\n  }\n\n  /**\n    * @desc make new Color instance with the same value as this one\n    * @return {IroColor}\n  */\n  public clone() {\n    return new IroColor(this);\n  }\n\n  /**\n    * @desc convert hsv object to rgb\n    * @param {Object} hsv hsv object\n    * @return {Object} rgb object\n  */\n  public static hsvToRgb(hsv: HsvColor): RgbColor {\n    const h = hsv.h / 60;\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const i = Math.floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    const mod = i % 6;\n    const r = [v, q, p, p, t, v][mod];\n    const g = [t, v, v, q, p, p][mod];\n    const b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255, \n      g: g * 255, \n      b: b * 255\n    };\n  }\n\n  /**\n    * @desc convert rgb object to hsv\n    * @param {Object} rgb - rgb object\n    * @return {Object} hsv object\n  */\n  public static rgbToHsv(rgb: RgbColor): HsvColor {\n    const r = rgb.r / 255;\n    const g = rgb.g / 255;\n    const b = rgb.b / 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const delta = max - min;\n    let hue = 0;\n    let value = max;\n    let saturation = max === 0 ? 0 : delta / max;\n    switch (max) {\n      case min: \n        hue = 0; // achromatic\n        break;\n      case r: \n        hue = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g: \n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n    }\n    return {\n      h: hue * 60,\n      s: saturation * 100,\n      v: value * 100\n    }\n  }\n\n  /**\n    * @desc convert hsv object to hsl\n    * @param {Object} hsv - hsv object\n    * @return {Object} hsl object\n  */\n  public static hsvToHsl(hsv: HsvColor): HslColor {\n    const s = hsv.s / 100;\n    const v = hsv.v / 100;\n    const l = (2 - s) * v;\n    const divisor = l <= 1 ? l : (2 - l);\n    // Avoid division by zero when lightness is close to zero\n    const saturation = divisor < 1e-9 ? 0 : (s * v) / divisor;\n    return {\n      h: hsv.h,\n      s: saturation * 100,\n      l: l * 50\n    };\n  }\n\n  /**\n    * @desc convert hsl object to hsv\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsv object\n  */\n  public static hslToHsv(hsl: HslColor): HsvColor {\n    const l = hsl.l * 2;\n    const s = (hsl.s * ((l <= 100) ? l : 200 - l)) / 100;\n    // Avoid division by zero when l + s is near 0\n    const saturation = (l + s < 1e-9) ? 0 : (2 * s) / (l + s);\n    return {\n      h: hsl.h,\n      s: saturation * 100,\n      v: (l + s) / 2\n    };\n  }\n\n  public get hsv() {\n    // _value is cloned to allow changes to be made to the values before passing them back\n    const value = this.value;\n    return {h: value.h, s: value.s, v: value.v};\n  }\n\n  public set hsv(newValue: any) {\n    const oldValue = this.value;\n\n    newValue = { ...oldValue, ...newValue };\n    // If this Color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this.onChange) {\n      // Compute changed values\n      let changes: ColorChanges = {\n        h: false,\n        v: false,\n        s: false\n      };\n\n      for (let key in oldValue) {\n        changes[key] = newValue[key] != oldValue[key]\n      };\n      // Update the old value\n      this.value = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v || changes.a) this.onChange(this, changes);\n    } else {\n      this.value = newValue;\n    }\n  }\n\n  public get rgb() {\n    const {r, g, b} = IroColor.hsvToRgb(this.value);\n    return {\n      r: Math.round(r),\n      g: Math.round(g),\n      b: Math.round(b),\n    };\n  }\n\n  public set rgb(value: any) {\n    this.hsv = {\n      ...IroColor.rgbToHsv(value), \n      // a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get hsl() {\n    const {h, s, l} = IroColor.hsvToHsl(this.value);\n    return {\n      h: Math.round(h),\n      s: Math.round(s),\n      l: Math.round(l),\n    };\n  }\n\n  public set hsl(value: any) {\n    this.hsv = {\n      ...IroColor.hslToHsv(value), \n      // a: (value.a === undefined) ? 1 : value.a\n    };\n  }\n\n  public get rgbString() {\n    const rgb = this.rgb;\n    return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n  }\n\n  public set rgbString(value: string) {\n    let match;\n    let r, g, b, a = 1;\n    if (match = REGEX_FUNCTIONAL_RGB.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n    }\n    else if (match = REGEX_FUNCTIONAL_RGBA.exec(value)) {\n      r = parseUnit(match[1], 255);\n      g = parseUnit(match[2], 255);\n      b = parseUnit(match[3], 255);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a};\n    } \n    else {\n      throw new Error('invalid rgb string');\n    }\n  }\n\n  public get hexString() {\n    const rgb = this.rgb;\n    return `#${ intToHex(rgb.r) }${ intToHex(rgb.g) }${ intToHex(rgb.b) }`;\n  }\n\n  public set hexString(value: string) {\n    let match;\n    let r, g, b, a = 255;\n    if (match = REGEX_HEX_3.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n    }\n    else if (match = REGEX_HEX_4.exec(value)) {\n      r = parseHexInt(match[1]) * 17;\n      g = parseHexInt(match[2]) * 17;\n      b = parseHexInt(match[3]) * 17;\n      a = parseHexInt(match[4]) * 17;\n    }\n    else if (match = REGEX_HEX_6.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n    }\n    else if (match = REGEX_HEX_8.exec(value)) {\n      r = parseHexInt(match[1]);\n      g = parseHexInt(match[2]);\n      b = parseHexInt(match[3]);\n      a = parseHexInt(match[4]);\n    }\n    if (match) {\n      this.rgb = {r, g, b, a: a / 255};\n    }\n    else {\n      throw new Error('invalid hex string');\n    }\n  }\n\n  public get hslString() {\n    const hsl = this.hsl;\n    return `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;\n  }\n\n  public set hslString(value: string) {\n    let match;\n    let h, s, l, a = 1;\n    if (match = REGEX_FUNCTIONAL_HSL.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n    }\n    else if (match = REGEX_FUNCTIONAL_HSLA.exec(value)) {\n      h = parseUnit(match[1], 360);\n      s = parseUnit(match[2], 100);\n      l = parseUnit(match[3], 100);\n      a = parseUnit(match[4], 1);\n    }\n    if (match) {\n      this.hsl = {h, s, l, a};\n    } \n    else {\n      throw new Error('invalid hsl string');\n    }\n  }\n}","import { IroColor } from './color';\n\nexport function getSliderDimensions(props: any) {\n  let { width, sliderHeight, borderWidth, handleRadius } = props;\n  sliderHeight = sliderHeight ? sliderHeight : props.padding * 2 + handleRadius * 2 + borderWidth * 2;\n  return {\n    radius: sliderHeight / 2,\n    x: 0,\n    y: 0,\n    width: width,\n    height: sliderHeight,\n  }\n}\n\nexport function getCurrentSliderValue(props: any) {\n  const hsv = props.color.hsv;\n  switch (props.sliderType) {\n    case 'hue':\n      return hsv.h /= 3.6;\n    case 'saturation':\n      return hsv.s;\n    case 'value':\n    default:\n      return hsv.v;\n  }\n}\n\nexport function getSliderValueFromInput(props: any, x: number, y: number, bounds) {\n  const handleRange = bounds.width - bounds.height;\n  const cornerRadius = bounds.height / 2;\n  let dist = x - (bounds.left + cornerRadius);\n  dist = Math.max(Math.min(dist, handleRange), 0);\n  return Math.round((100 / handleRange) * dist);\n}\n\nexport function getSliderHandlePosition(props: any) {\n  const { width, height, radius } = getSliderDimensions(props);\n  const sliderValue = getCurrentSliderValue(props);\n  const handleRange = width - radius * 2;\n  const x = radius + (sliderValue / 100) * handleRange;\n  const y = height / 2;\n  return {x, y};\n}\n\nexport function getSliderGradient(props: any) {\n  const hsv = props.color.hsv;\n\n  switch (props.sliderType) {\n    case 'hue':\n      return [\n        {offset: '0',      color: '#f00'},\n        {offset: '16.666', color: '#ff0'},\n        {offset: '33.333', color: '#0f0'},\n        {offset: '50',     color: '#0ff'},\n        {offset: '66.666', color: '#00f'},\n        {offset: '83.333', color: '#f0f'},\n        {offset: '100',    color: '#f00'},\n      ];\n    case 'saturation':\n      const noSat = IroColor.hsvToHsl({h: hsv.h, s: 0, v: hsv.v});\n      const fullSat = IroColor.hsvToHsl({h: hsv.h, s: 100, v: hsv.v});\n      return [\n        {offset: '0', color: `hsl(${noSat.h}, ${noSat.s}%, ${noSat.l}%)`},\n        {offset: '100', color: `hsl(${fullSat.h}, ${fullSat.s}%, ${fullSat.l}%)`}\n      ];\n    case 'value':\n    default:\n      const hsl = IroColor.hsvToHsl({h: hsv.h, s: hsv.s, v: 100});\n      return [\n        {offset: '0', color: '#000'},\n        {offset: '100', color: `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`}\n      ];\n  }\n}","export function translateWheelAngle(props: any, angle: number) {\n  const wheelAngle = props.wheelAngle;\n    if (props.wheelDirection === 'clockwise') {\n      angle = -360 + angle - wheelAngle;\n    } else {\n      angle = wheelAngle - angle\n    }\n    // javascript's modulo operator doesn't produce positive numbers with negative input\n    // https://dev.to/maurobringolf/a-neat-trick-to-compute-modulo-of-negative-numbers-111e\n    return (angle % 360 + 360) % 360;\n}\n\nexport function getWheelCenter(props: any) {\n  const dist = (props.width / 2);\n  return {\n    x: dist,\n    y: dist\n  };\n}\n\nexport function getWheelHandlePosition(props: any) {\n  const hsv = props.color.hsv;\n  const { width, borderWidth, padding, handleRadius, wheelDirection } = props;\n  const radius = width / 2 - borderWidth;\n  const center = getWheelCenter(props);\n  const handleAngle = translateWheelAngle(props, hsv.h) * (Math.PI / 180);\n  const handleRange = radius - padding - handleRadius - borderWidth;\n  const handleDist = (hsv.s / 100) * handleRange;\n  const direction = wheelDirection === 'clockwise' ? -1 : 1;\n  return {\n    x: center.x + handleDist * Math.cos(handleAngle) * direction,\n    y: center.y + handleDist * Math.sin(handleAngle) * direction,\n  }\n}\n\nexport function getWheelValueFromInput(props: any, x: number, y: number, bounds) {\n  const { left, top } = bounds;\n  const radius = props.width / 2;\n  const handleRange = (radius - props.padding - props.handleRadius - props.borderWidth);\n  const cX = radius;\n  const cY = radius;\n  x = cX - (x - left);\n  y = cY - (y - top);\n  const handleAngle = Math.atan2(y, x);\n  // Calculate the hue by converting the angle to radians\n  const hue = translateWheelAngle(props, Math.round(handleAngle * (180 / Math.PI)) + 180);\n  // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n  const handleDist = Math.min(Math.sqrt(x * x + y * y), handleRange);\n  return {\n    h: hue,\n    s: Math.round((100 / handleRange) * handleDist)\n  };\n}","/**\n * Resolve an SVG URL\n * This is required to work around how Safari handles gradient URLS under certain conditions\n * If a page is using a client-side routing library which makes use of the HTML <base> tag, \n * Safari won't be able to render SVG gradients properly (as they are referenced by URLs)\n * More info on the problem: \n * https://stackoverflow.com/questions/19742805/angular-and-svg-filters/19753427#19753427\n * https://github.com/jaames/iro.js/issues/18\n * https://github.com/jaames/iro.js/issues/45\n */\nexport function resolveSvgUrl(url) {\n  // Sniff useragent string to check if the user is running Safari\n  const ua = window.navigator.userAgent;\n  const isSafari = /^((?!chrome|android).)*safari/i.test(ua);\n  const isIos = /iPhone|iPod|iPad/i.test(ua);\n  const location = window.location;\n  return (isSafari || isIos) ? `${location.protocol}//${location.host}${location.pathname}${location.search}${url}` : url;\n}\n\n/**\n * Get the path commands to draw an svg arc\n */\nexport function getSvgArcPath(cx: number, cy: number, radius: number, startAngle: number, endAngle: number) {\n  const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  startAngle *= Math.PI / 180;\n  endAngle *= Math.PI / 180;\n  const x1 = cx + radius * Math.cos(endAngle);\n  const y1 = cy + radius * Math.sin(endAngle);\n  const x2 = cx + radius * Math.cos(startAngle);\n  const y2 = cy + radius * Math.sin(startAngle);\n  return `M ${x1} ${y1} A ${radius} ${radius} 0 ${largeArcFlag} 0 ${x2} ${y2}`;\n}"],"names":["parseUnit","str","max","isPercentage","indexOf","num","parseFloat","parseHexInt","parseInt","intToHex","int","toString","padStart","const","CSS_UNIT","PERMISSIVE_MATCH_3","PERMISSIVE_MATCH_4","REGEX_FUNCTIONAL_RGB","RegExp","REGEX_FUNCTIONAL_RGBA","REGEX_FUNCTIONAL_HSL","REGEX_FUNCTIONAL_HSLA","REGEX_HEX_3","REGEX_HEX_4","REGEX_HEX_6","REGEX_HEX_8","IroColor","constructor","value","onChange","this","set","getSliderDimensions","props","radius","sliderHeight","padding","x","y","width","height","getCurrentSliderValue","hsv","color","sliderType","h","s","v","translateWheelAngle","angle","wheelAngle","wheelDirection","getWheelCenter","dist","isString","isObject","test","hexString","rgbString","hslString","instanceOfRgb","rgb","instanceOfHsv","instanceOfHsl","Error","hsl","setChannel","format","channel","Object","clone","hsvToRgb","i","Math","floor","f","p","q","t","mod","r","g","b","rgbToHsv","min","delta","hue","saturation","hsvToHsl","l","divisor","hslToHsv","prototypeAccessors","newValue","oldValue","changes","let","key","a","round","match","exec","bounds","handleRange","left","offset","noSat","fullSat","borderWidth","center","handleAngle","PI","handleDist","handleRadius","direction","cos","sin","atan2","sqrt","url","ua","window","navigator","userAgent","isSafari","isIos","location","cx","cy","startAngle","endAngle","largeArcFlag"],"mappings":"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"}